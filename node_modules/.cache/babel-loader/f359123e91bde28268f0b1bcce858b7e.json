{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport './CustomCSS.css';\nimport * as parsedData from './JSON_Dat.json';\nimport SideNav, { NavItem, NavIcon, NavText } from '@trendmicro/react-sidenav';\nimport { Button, Modal as _Modal, ModalBody, ModalHeader, ModalFooter } from 'mdbreact';\nimport '@trendmicro/react-sidenav/dist/react-sidenav.css';\nimport { Tooltip } from '@trendmicro/react-tooltip';\nimport '@trendmicro/react-tooltip/dist/react-tooltip.css'; //These imports are killing the modals\n\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.HeaderFunc = function () {\n      //Remeber to check for the header logo\n      var children = [];\n      var HeaderLogo,\n          hrefLink = \"http://app01.saeon.ac.za/sarva3/\",\n          iframeSrc = 'http://www.sasdi.net/search.aspx?anytext=';\n      var base = React.createElement(\"nav\", {\n        className: \"white\",\n        role: \"navigation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"nav-wrapper container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        id: \"logo-container\",\n        href: hrefLink,\n        rel: \"noopener nereferrer\",\n        target: \"_blank\",\n        className: \"brand-logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, \"\\xA0 SARVA 3.0\"), React.createElement(\"ul\", {\n        className: \"right hide-on-med-and-down\",\n        key: \"HeaderFuncKey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, children, React.createElement(\"i\", {\n        className: \"glyphicon glyphicon-search\",\n        style: {\n          fontSize: '1.75em',\n          color: 'rgb(104, 103, 103)'\n        },\n        onClick: function onClick() {\n          return _this.toggle('searchBar');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        className: _this.state[\"HideSearchBar\"] ? 'hidden black-text' : 'black-text',\n        type: \"text\",\n        name: \"Search\",\n        value: _this.state.SearchText,\n        onChange: _this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }), React.createElement(\"i\", {\n        className: \"hidden glyphicon glyphicon-search\",\n        style: {\n          fontSize: '1.75em',\n          color: 'rgb(104, 103, 103)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: _this.state[\"HideSearchBar\"] ? 'hidden glyphicon glyphicon-search' : 'glyphicon glyphicon-search',\n        style: {\n          fontSize: '1.75em',\n          color: 'black',\n          background: 'transparent',\n          border: 'none'\n        },\n        onClick: function onClick() {\n          return _this.toggle(\"SearchModal\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      })), React.createElement(_Modal, {\n        id: \"searchiFrame\",\n        onClickAway: function onClickAway() {\n          return _this.SearchModal();\n        },\n        effect: \"fadeInUp\",\n        isOpen: _this.state[\"SearchModal\"],\n        toggle: function toggle() {\n          return _this.toggle(\"SearchModal\");\n        },\n        size: \"lg\",\n        background: \"grey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, React.createElement(\"iframe\", {\n        style: {\n          position: \"fixed\",\n          top: \"0px\",\n          left: \"0px\",\n          bottom: \"0px\",\n          right: \"0px\",\n          width: \"100%\",\n          height: \"100%\",\n          border: \"none\",\n          margin: \"0\",\n          padding: \"0\",\n          overflow: \"hidden\",\n          index: '999999'\n        },\n        src: iframeSrc + _this.state.SearchText.toString() + '&noframe=true',\n        title: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }))));\n\n      for (var x in parsedData.default.ideas) {\n        for (var y in parsedData.default.ideas[x]) {\n          if (parsedData.default.ideas[x][y] === \"NavBar\") {\n            var NavBarStyles = _this.BuildStyleVar(parsedData.default.ideas[x]);\n\n            if (parsedData.default.ideas[x].ideas !== \"undefined\") {\n              for (var z in parsedData.default.ideas[x].ideas) {\n                if (parsedData.default.ideas[x].ideas[z].title === \"Menu\") {\n                  for (var ddl in parsedData.default.ideas[x].ideas[z].ideas) {\n                    var innerArray = [];\n\n                    if (parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas !== \"undefined\") {\n                      for (var inner in parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas) {\n                        var ddlStyle = {\n                          fontSize: '12px',\n                          color: 'red',\n                          width: '100%',\n                          indent: '50px'\n                        };\n                        innerArray.push(React.createElement(\"li\", {\n                          style: ddlStyle,\n                          key: parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas[inner].id,\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 318\n                          },\n                          __self: this\n                        }, React.createElement(\"a\", {\n                          href: \"www.google.com\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 318\n                          },\n                          __self: this\n                        }, parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas[inner].title)));\n\n                        _this.linkCheck(parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas[inner].id); // this.FindPath(parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas[inner].id);\n\n                      }\n                    }\n\n                    if (innerArray.length > 0) {\n                      children.push(React.createElement(\"li\", {\n                        className: \"sub-menu-parent\",\n                        key: parsedData.default.ideas[x].ideas[z].ideas[ddl].id,\n                        \"tab-index\": \"0\",\n                        style: NavBarStyles,\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 325\n                        },\n                        __self: this\n                      }, React.createElement(\"a\", {\n                        href: \"www.google.com\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 326\n                        },\n                        __self: this\n                      }, parsedData.default.ideas[x].ideas[z].ideas[ddl].title, \" \\u21D3\"), React.createElement(\"ul\", {\n                        className: \"sub-menu\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 327\n                        },\n                        __self: this\n                      }, innerArray)));\n                    } else {\n                      _this.linkCheck(parsedData.default.ideas[x].ideas[z].ideas[ddl].id); // this.FindPath(parsedData.default.ideas[x].ideas[z].ideas[ddl].id);\n\n\n                      children.push(React.createElement(\"li\", {\n                        styled: \"true\",\n                        key: parsedData.default.ideas[x].ideas[z].ideas[ddl].id,\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 335\n                        },\n                        __self: this\n                      }, React.createElement(\"a\", {\n                        href: \"www.google.com\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 335\n                        },\n                        __self: this\n                      }, parsedData.default.ideas[x].ideas[z].ideas[ddl].title)));\n                    }\n                  }\n                } else if (parsedData.default.ideas[x].ideas[z].title === \"Logo\") {\n                  for (var count in parsedData.default.ideas[x].ideas[z].ideas) {\n                    if (_this.isImage(parsedData.default.ideas[x].ideas[z].ideas[count].title)) {\n                      HeaderLogo = _this.googleImage(_this.extractLink(parsedData.default.ideas[x].ideas[z].ideas[count].title));\n                    }\n                  }\n\n                  children.push(React.createElement(\"img\", {\n                    id: \"menu-logo\",\n                    alt: \"img not loaded\",\n                    src: HeaderLogo,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 345\n                    },\n                    __self: this\n                  }));\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return base;\n    };\n\n    _this.SideNavFunc = function () {\n      var InnerDdl = [],\n          Items = [];\n      var Base = React.createElement(SideNav, {\n        className: \"sidenav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }, React.createElement(SideNav.Toggle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }), React.createElement(SideNav.Nav, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }, Items));\n\n      var _loop = function _loop(o) {\n        for (var u in parsedData.default.ideas[o]) {\n          if (parsedData.default.ideas[o][u] === \"SideNav\") {\n            if (parsedData.default.ideas[o].ideas !== \"undefined\") {\n              var _loop2 = function _loop2(i) {\n                //Rember to check if you need to initialize anything\n                //Here check for a glyphicon, using home for now\n                menuItemTitle = \"\";\n                menuItemIcon = \"\";\n                menuItemTooltip = \"\";\n\n                if (parsedData.default.ideas[o].ideas[i].ideas !== \"undefined\") {\n                  InnerDdl = [];\n\n                  var _loop3 = function _loop3(w) {\n                    //Check what type it is, if its a modal, new tab, replace content and breadcrumb\n                    _this.linkCheck(parsedData.default.ideas[o].ideas[i].ideas[w].id, false); // #region Set Modal var's (if modal)\n\n\n                    var ModalId = '#' + parsedData.default.ideas[o].ideas[i].ideas[w].title.replace(/\\s/g, '');\n                    modalText = \"\";\n                    innerItemType = \"\";\n                    newTabLink = \"\"; // #endregion\n                    // #region Read the inner-text JSON\n\n                    if (parsedData.default.ideas[o].ideas[i].ideas[w].attr !== \"undefined\") {\n                      for (var r in parsedData.default.ideas[o].ideas[i].ideas[w]) {\n                        for (var p in parsedData.default.ideas[o].ideas[i].ideas[w][r]) {\n                          for (var text in parsedData.default.ideas[o].ideas[i].ideas[w][r][p]) {\n                            if (text === \"text\") {\n                              // this will now possibly contain JSON\n                              innerJSON = JSON.parse(parsedData.default.ideas[o].ideas[i].ideas[w][r][p][text]);\n\n                              if (innerJSON !== undefined) {\n                                modalText = innerJSON.text;\n                                innerItemType = innerJSON.type;\n\n                                if (innerJSON.link !== undefined) {\n                                  newTabLink = innerJSON.link;\n                                }\n                              } else {\n                                modalText = parsedData.default.ideas[o].ideas[i].ideas[w][r][p][text];\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } // #endregion\n\n\n                    if (innerItemType.toString() === \"modal\") {\n                      // If Modal\n                      InnerDdl.push(React.createElement(NavItem, {\n                        eventKey: parsedData.default.ideas[o].ideas[i].ideas[w].id,\n                        key: parsedData.default.ideas[o].ideas[i].ideas[w].id,\n                        onClick: function onClick() {\n                          return _this.toggle(ModalId);\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 421\n                        },\n                        __self: this\n                      }, React.createElement(NavText, {\n                        style: {\n                          color: 'black !important'\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 422\n                        },\n                        __self: this\n                      }, React.createElement(\"a\", {\n                        type: \"button\",\n                        href: \"/#\",\n                        className: \"black-text\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 423\n                        },\n                        __self: this\n                      }, parsedData.default.ideas[o].ideas[i].ideas[w].title), _this.Modal(parsedData.default.ideas[o].ideas[i].ideas[w].title, modalText, parsedData.default.ideas[o].ideas[i].ideas[w].title.replace(/\\s/g, '')))));\n                    } else if (innerItemType === \"tab\") {\n                      //var link = \"http://www.sasdi.net/search.aspx?anytext=energy&noframe=true\"\n                      // If new tab link  \n                      InnerDdl.push(React.createElement(NavItem, {\n                        eventKey: parsedData.default.ideas[o].ideas[i].ideas[w].id,\n                        key: parsedData.default.ideas[o].ideas[i].ideas[w].id,\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 432\n                        },\n                        __self: this\n                      }, React.createElement(NavText, {\n                        style: {\n                          color: 'black !important'\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 433\n                        },\n                        __self: this\n                      }, React.createElement(\"a\", {\n                        href: newTabLink,\n                        rel: \"noopener nereferrer\",\n                        className: \"black-text\",\n                        target: \"_blank\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 434\n                        },\n                        __self: this\n                      }, parsedData.default.ideas[o].ideas[i].ideas[w].title))));\n                    } else if (innerItemType === \"content\") // \n                      {\n                        //var contentNodePath = this.FindPath(parsedData.default.ideas[o].ideas[i].ideas[w].id)\n                        // If content reload with new breadcrumb\n                        //alert(parsedData.default.ideas[o].ideas[i].ideas[w].id)\n                        if (_this.linkCheck(parsedData.default.ideas[o].ideas[i].ideas[w].id, false)) {\n                          alert(\"TEst : parsedData.default.ideas[o].ideas[i].ideas[w].id\");\n                          contentVar = _this.FindCorrespondingId(parsedData.default.ideas[o].ideas[i].ideas[w].id);\n                          alert(contentVar);\n                          InnerDdl.push(React.createElement(NavItem, {\n                            eventKey: parsedData.default.ideas[o].ideas[i].ideas[w].id,\n                            key: parsedData.default.ideas[o].ideas[i].ideas[w].id,\n                            onClick: function onClick() {\n                              return _this.reloadContent(parsedData.default.ideas[o].ideas[i].ideas[w].id, \"content\");\n                            },\n                            __source: {\n                              fileName: _jsxFileName,\n                              lineNumber: 450\n                            },\n                            __self: this\n                          }, React.createElement(NavText, {\n                            style: {\n                              color: 'black !important'\n                            },\n                            __source: {\n                              fileName: _jsxFileName,\n                              lineNumber: 451\n                            },\n                            __self: this\n                          }, React.createElement(\"a\", {\n                            href: \"https://#\",\n                            __source: {\n                              fileName: _jsxFileName,\n                              lineNumber: 452\n                            },\n                            __self: this\n                          }, parsedData.default.ideas[o].ideas[i].ideas[w].title))));\n                        } else {\n                          InnerDdl.push(React.createElement(NavItem, {\n                            eventKey: parsedData.default.ideas[o].ideas[i].ideas[w].id,\n                            key: parsedData.default.ideas[o].ideas[i].ideas[w].id,\n                            onClick: function onClick() {\n                              return _this.reloadContent(parsedData.default.ideas[o].ideas[i].ideas[w].id, \"content\");\n                            },\n                            __source: {\n                              fileName: _jsxFileName,\n                              lineNumber: 457\n                            },\n                            __self: this\n                          }, React.createElement(NavText, {\n                            style: {\n                              color: 'black !important'\n                            },\n                            __source: {\n                              fileName: _jsxFileName,\n                              lineNumber: 458\n                            },\n                            __self: this\n                          }, React.createElement(\"a\", {\n                            href: \"https://#\",\n                            __source: {\n                              fileName: _jsxFileName,\n                              lineNumber: 459\n                            },\n                            __self: this\n                          }, parsedData.default.ideas[o].ideas[i].ideas[w].title))));\n                        }\n                      } else {\n                      InnerDdl.push(React.createElement(NavItem, {\n                        eventKey: parsedData.default.ideas[o].ideas[i].ideas[w].id,\n                        key: parsedData.default.ideas[o].ideas[i].ideas[w].id,\n                        onClick: function onClick() {\n                          return _this.reloadContent(parsedData.default.ideas[o].ideas[i].ideas[w].title, \"content\");\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 465\n                        },\n                        __self: this\n                      }, React.createElement(NavText, {\n                        style: {\n                          color: 'black !important'\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 466\n                        },\n                        __self: this\n                      }, React.createElement(\"a\", {\n                        href: \"https://#\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 467\n                        },\n                        __self: this\n                      }, parsedData.default.ideas[o].ideas[i].ideas[w].title))));\n                    }\n                  };\n\n                  for (var w in parsedData.default.ideas[o].ideas[i].ideas) {\n                    _loop3(w);\n                  }\n\n                  if (parsedData.default.ideas[o].ideas[i].attr.note.text !== undefined) {\n                    menuItem = JSON.parse(parsedData.default.ideas[o].ideas[i].attr.note.text);\n\n                    if (menuItem.title !== undefined) {\n                      menuItemTitle = menuItem.title;\n                    }\n\n                    if (menuItem.icon !== undefined) {\n                      menuItemIcon = menuItem.icon;\n                    }\n\n                    if (menuItem.tooltip !== undefined) {\n                      menuItemTooltip = menuItem.tooltip;\n                    }\n                  }\n\n                  Items.push(React.createElement(NavItem, {\n                    eventKey: parsedData.default.ideas[o].ideas[i].id,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 489\n                    },\n                    __self: this\n                  }, React.createElement(NavIcon, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 490\n                    },\n                    __self: this\n                  }, React.createElement(\"i\", {\n                    className: menuItemIcon,\n                    style: {\n                      fontSize: '1.75em',\n                      color: '#fff'\n                    },\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 491\n                    },\n                    __self: this\n                  })), React.createElement(NavText, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 493\n                    },\n                    __self: this\n                  }, menuItemTooltip.length === 0 ? React.createElement(\"span\", {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 494\n                    },\n                    __self: this\n                  }, menuItemTitle) : React.createElement(Tooltip, {\n                    placement: \"top\",\n                    content: menuItemTooltip,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 494\n                    },\n                    __self: this\n                  }, React.createElement(\"span\", {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 494\n                    },\n                    __self: this\n                  }, menuItemTitle))), InnerDdl));\n                } else {\n                  if (parsedData.default.ideas[o].ideas[i].attr.note.text !== undefined) {\n                    // var menuItem = JSON.parse(parsedData.default.ideas[o].ideas[i].attr.note.text)\n                    menuItem = JSON.parse(parsedData.default.ideas[o].ideas[i].attr.note.text);\n                    menuItemTitle = menuItem.title;\n                    menuItemIcon = menuItem.icon;\n                    menuItemTooltip = menuItem.tooltip;\n                  }\n\n                  Items.push(React.createElement(NavItem, {\n                    eventKey: parsedData.default.ideas[o].ideas[i].id,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 510\n                    },\n                    __self: this\n                  }, React.createElement(NavIcon, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 511\n                    },\n                    __self: this\n                  }, React.createElement(\"i\", {\n                    className: menuItemIcon,\n                    style: {\n                      fontSize: '1.75em'\n                    },\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 512\n                    },\n                    __self: this\n                  })), React.createElement(NavText, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 514\n                    },\n                    __self: this\n                  }, menuItemTooltip.length === 0 ? React.createElement(\"span\", {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 516\n                    },\n                    __self: this\n                  }, menuItemTitle) : React.createElement(Tooltip, {\n                    placement: \"top\",\n                    content: menuItemTooltip,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 516\n                    },\n                    __self: this\n                  }, React.createElement(\"span\", {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 516\n                    },\n                    __self: this\n                  }, menuItemTitle)))));\n                }\n              };\n\n              for (var i in parsedData.default.ideas[o].ideas) {\n                _loop2(i);\n              }\n            }\n          }\n        }\n      };\n\n      for (var o in parsedData.default.ideas) {\n        var menuItemTitle, menuItemIcon, menuItemTooltip;\n        var modalText, innerItemType, newTabLink;\n        var innerJSON;\n        var contentVar;\n        var menuItem;\n\n        _loop(o);\n      }\n\n      return Base;\n    };\n\n    _this.ContentFunc = function (Page) {\n      //Make use of page var to reload page content\n      //So in here we will receive a node title, check the \"Content\" branch and iterate through its data where the node matches the Title\n      ////////////////////////////////////////////////////////////////////////\n      // Hoping to load a content node by it's id\n      // if (Page !== \"\" || Page !== undefined) {\n      // Call \"FindPath\", hoping I can get it to return the path to the node, which we can then exploit \n      //this.FindPath(\"27.5661.e19774766-e780.6e09bd81a\")\n      // }\n      ////////////////////////////////////////////////////////////////////////\n      //See if the new page has/needs widgets then load it accordingly here\n      var DynamicContent = [];\n\n      if (Page !== \"\") {\n        if (_this.state[\"content\"] !== null) {\n          for (var x in parsedData.default.ideas) {\n            for (var y in parsedData.default.ideas[x]) {\n              if (parsedData.default.ideas[x][y] === \"Content\") {\n                if (parsedData.default.ideas[x].ideas !== \"undefined\") {\n                  for (var z in parsedData.default.ideas[x].ideas) {\n                    // Initialize your vairables\n                    var Heading = \"\",\n                        Subtext = \"\",\n                        ButtonText = \"\";\n\n                    for (var r in parsedData.default.ideas[x].ideas[z]) {\n                      // Get the header for this section's content\n                      if (r === \"title\") {\n                        Heading = parsedData.default.ideas[x].ideas[z][r];\n                      } // Get the actual content for the section\n\n\n                      if (r === \"attr\") {\n                        for (var w in parsedData.default.ideas[x].ideas[z][r]) {\n                          for (var g in parsedData.default.ideas[x].ideas[z][r][w]) {\n                            if (g === \"text\") {\n                              Subtext = React.createElement(\"div\", {\n                                class: \"row center\",\n                                __source: {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 571\n                                },\n                                __self: this\n                              }, React.createElement(\"h5\", {\n                                class: \"header col s12 text-darken-4\",\n                                __source: {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 572\n                                },\n                                __self: this\n                              }, parsedData.default.ideas[x].ideas[z][r][w][g]));\n                            }\n                          }\n                        }\n                      } //Check the \"Ideas\" for buttons\n\n\n                      for (var j in parsedData.default.ideas[x].ideas[z].ideas) {\n                        for (var k in parsedData.default.ideas[x].ideas[z].ideas[j]) {\n                          if (k === \"title\") {\n                            ButtonText = parsedData.default.ideas[x].ideas[z].ideas[j][k];\n                          }\n                        }\n                      }\n                    }\n\n                    if (Heading !== \"Widgets\") {\n                      if (ButtonText.length === 0) {\n                        DynamicContent.push(React.createElement(\"div\", {\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 592\n                          },\n                          __self: this\n                        }, React.createElement(\"h2\", {\n                          class: \"header center text-darken-4\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 592\n                          },\n                          __self: this\n                        }, Heading), Subtext));\n                      } else if (ButtonText.length > 0) {\n                        DynamicContent.push(React.createElement(\"div\", {\n                          class: \"parallax-container valign-wrapper\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 595\n                          },\n                          __self: this\n                        }, React.createElement(\"div\", {\n                          class: \"section no-pad-bot\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 596\n                          },\n                          __self: this\n                        }, React.createElement(\"div\", {\n                          class: \"container\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 597\n                          },\n                          __self: this\n                        }, React.createElement(\"div\", {\n                          class: \"row center\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 598\n                          },\n                          __self: this\n                        }, React.createElement(\"h2\", {\n                          class: \"header center brown-text text-darken-3\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 599\n                          },\n                          __self: this\n                        }, Heading), React.createElement(\"h5\", {\n                          class: \"header col s12 brown-text text-darken-3\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 600\n                          },\n                          __self: this\n                        }, Subtext)), React.createElement(\"div\", {\n                          class: \"row center\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 602\n                          },\n                          __self: this\n                        }, React.createElement(\"a\", {\n                          href: \"#data-modal\",\n                          id: \"download-button\",\n                          type: \"button\",\n                          class: \"btn btn-primary\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 603\n                          },\n                          __self: this\n                        }, ButtonText)), React.createElement(\"br\", {\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 605\n                          },\n                          __self: this\n                        })))));\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      var Base = React.createElement(\"div\", {\n        id: \"index-banner\",\n        className: \"parallax-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 620\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"section no-pad-bot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 621\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 622\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 623\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 624\n        },\n        __self: this\n      }), DynamicContent)));\n      return Base;\n    };\n\n    _this.ContentWidgets = function (Content) {\n      //#region Static Widgets\n      // const Widgets = <div class=\"section\">\n      //                   <div class=\"row\">\n      //                     <div class=\"col s12 m4\">\n      //                       <div class=\"icon-block center\">\n      //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"search-modal\" onClick={ () => this.reloadContent('Search')}>Search</button>   \n      //                         <h5 class=\"center\">Search and Discover Resources</h5>\n      //                         <p class=\"light center\">Use simple or advanced tools to search for data meeting your criteria.</p>\n      //                       </div>\n      //                     </div>\n      //                     <div class=\"col s12 m4\">\n      //                       <div class=\"icon-block center\">\n      //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"theme-modal\" onClick={ () => this.reloadContent('Themes')}>Themes</button>            \n      //                         <h5 class=\"center\">Explore Available Resources by Sector or Theme</h5>\n      //                         <p class=\"light center\">Browse, preview, and access data and narratives in popular collections and in common themes.</p>\n      //                       </div>\n      //                     </div>\n      //                     <div class=\"col s12 m4\">\n      //                       <div class=\"icon-block center\">\n      //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"contr-modal\">Contribute</button>  \n      //                         <h5 class=\"center\">Tell Us About Your Area of Interest</h5>\n      //                         <p class=\"light center\"><a href=\"www.google.com\">Register</a> as a user and contribute data, assessments, and media.</p>\n      //                       </div>\n      //                     </div>\n      //                     </div>\n      //                 </div>\n      //#endregion\n      var Widgets = [];\n\n      if (_this.state[\"content\"] !== null) {\n        for (var x in parsedData.default.ideas) {\n          for (var y in parsedData.default.ideas[x]) {\n            if (parsedData.default.ideas[x][y] === \"Content\") {\n              if (parsedData.default.ideas[x].ideas !== \"undefined\") {\n                for (var z in parsedData.default.ideas[x].ideas) {\n                  if (parsedData.default.ideas[x].ideas[z].title === \"Widgets\") {\n                    var _loop4 = function _loop4(d) {\n                      Description = \"\";\n                      ButtonText = \"\";\n                      Header = parsedData.default.ideas[x].ideas[z].ideas[d].title; //Here we search for the attr node to see if there's text\n\n                      for (var j in parsedData.default.ideas[x].ideas[z].ideas[d]) {\n                        if (j === \"attr\") {\n                          for (var k in parsedData.default.ideas[x].ideas[z].ideas[d][j]) {\n                            for (var l in parsedData.default.ideas[x].ideas[z].ideas[d][j][k]) {\n                              if (l === \"text\") {\n                                Description = parsedData.default.ideas[x].ideas[z].ideas[d][j][k].text;\n                              }\n                            }\n                          }\n                        }\n                      } //Here we search the nodes \"Ideas\" child for the button text\n\n\n                      for (var c in parsedData.default.ideas[x].ideas[z].ideas[d].ideas) {\n                        ButtonText = parsedData.default.ideas[x].ideas[z].ideas[d].ideas[c].title;\n                      }\n\n                      var MessengerVar = ButtonText.toString();\n                      Widgets.push(React.createElement(\"div\", {\n                        className: \"col s12 m4\",\n                        key: parsedData.default.ideas[x].ideas[z].ideas[d].id,\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 704\n                        },\n                        __self: this\n                      }, React.createElement(\"div\", {\n                        className: \"icon-block center\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 705\n                        },\n                        __self: this\n                      }, React.createElement(\"button\", {\n                        type: \"button\",\n                        className: \"btn btn-primary\",\n                        \"data-target\": \"theme-modal\",\n                        onClick: function onClick() {\n                          return _this.reloadContent(MessengerVar, 'widget');\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 706\n                        },\n                        __self: this\n                      }, ButtonText), React.createElement(\"h4\", {\n                        className: \"center\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 707\n                        },\n                        __self: this\n                      }, Header), React.createElement(\"p\", {\n                        className: \"light center\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 708\n                        },\n                        __self: this\n                      }, Description))));\n                    };\n\n                    for (var d in parsedData.default.ideas[x].ideas[z].ideas) {\n                      var Description, ButtonText, Header;\n\n                      _loop4(d);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      var Base = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 720\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container widgets\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 721\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 722\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 723\n        },\n        __self: this\n      }, Widgets))), React.createElement(\"div\", {\n        className: \"parallax-container valign-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 728\n        },\n        __self: this\n      }));\n\n      if (Content.length === 0) {\n        return Base;\n      } else {\n        return null;\n      }\n    };\n\n    _this.FooterFunc = function () {\n      var children = [];\n      var FooterStyle; //= { 'padding-left': '1%', 'padding-right': '1%' }\n\n      var cardTitle;\n      var cardSub;\n\n      for (var x in parsedData.default.ideas) {\n        for (var y in parsedData.default.ideas[x]) {\n          if (parsedData.default.ideas[x][y] === \"Footer\") {\n            FooterStyle = _this.BuildStyleVar(parsedData.default.ideas[x]);\n\n            if (parsedData.default.ideas[x].ideas !== \"undefined\") {\n              for (var z in parsedData.default.ideas[x].ideas) {\n                cardTitle = \"\";\n                cardSub = \"\";\n                var type = false;\n                var linkList = [];\n\n                for (var r in parsedData.default.ideas[x].ideas[z]) {\n                  if (r === \"title\") {\n                    cardTitle = parsedData.default.ideas[x].ideas[z][r];\n                  } else if (r === \"attr\") {\n                    for (var t in parsedData.default.ideas[x].ideas[z][r]) {\n                      for (var u in parsedData.default.ideas[x].ideas[z][r][t]) {\n                        if (u === \"text\") {\n                          cardSub = React.createElement(\"p\", {\n                            className: \"white-text light\",\n                            __source: {\n                              fileName: _jsxFileName,\n                              lineNumber: 772\n                            },\n                            __self: this\n                          }, \" \", parsedData.default.ideas[x].ideas[z][r][t][u], \" \");\n                        }\n                      }\n                    }\n                  } else if (r === \"ideas\") {\n                    var link = \"\";\n\n                    for (var _t in parsedData.default.ideas[x].ideas[z][r]) {\n                      //Check link type here and determine if its a logo or something\n                      link = _this.extractLink(parsedData.default.ideas[x].ideas[z][r][_t].title);\n\n                      if (_this.isImage(link)) {\n                        //If it is an image, or more accurately it is a google drive doc\n                        cardSub = React.createElement(\"img\", {\n                          src: link.replace(\"open\", \"uc\"),\n                          alt: \"img not loaded\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 784\n                          },\n                          __self: this\n                        });\n                      } else {\n                        (function () {\n                          //If it is not a google drive link\n                          type = true;\n\n                          var ModalId = '#' + parsedData.default.ideas[x].ideas[z][r][_t].id.replace(/\\s/g, ''); // while (ModalId.indexOf('.') !== 0) {\n                          //   //ModalId = ModalId.replace('.','');\n                          //   alert(ModalId.indexOf('.'))\n                          //   ModalId = ModalId.slice(ModalId.indexOf('.'), ModalId.indexOf('.') + 1);\n                          // }\n\n\n                          linkList.push(React.createElement(\"div\", {\n                            __source: {\n                              fileName: _jsxFileName,\n                              lineNumber: 799\n                            },\n                            __self: this\n                          }, React.createElement(\"li\", {\n                            key: parsedData.default.ideas[x].ideas[z][r][_t].id,\n                            __source: {\n                              fileName: _jsxFileName,\n                              lineNumber: 800\n                            },\n                            __self: this\n                          }, React.createElement(\"a\", {\n                            className: \"white-text light\",\n                            href: \"https://#\",\n                            onClick: function onClick() {\n                              return _this.toggle(ModalId);\n                            },\n                            __source: {\n                              fileName: _jsxFileName,\n                              lineNumber: 801\n                            },\n                            __self: this\n                          }, parsedData.default.ideas[x].ideas[z][r][_t].title.split(\"http\")[0])), _this.iFrameModal(\"\", link, ModalId)));\n                        })();\n                      }\n                    }\n                  }\n                }\n\n                if (type) {\n                  children.push(React.createElement(\"div\", {\n                    className: \"col l3 s12\",\n                    key: parsedData.default.ideas[x].ideas[z].id + x.toString(),\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 812\n                    },\n                    __self: this\n                  }, React.createElement(\"h5\", {\n                    className: \"white-text light\",\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 813\n                    },\n                    __self: this\n                  }, \" \", cardTitle, \" \"), React.createElement(\"ul\", {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 814\n                    },\n                    __self: this\n                  }, linkList)));\n                } else {\n                  children.push(React.createElement(\"div\", {\n                    className: \"col l3 s12\",\n                    key: parsedData.default.ideas[x].ideas[z].id + x.toString(),\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 818\n                    },\n                    __self: this\n                  }, React.createElement(\"h5\", {\n                    className: \"white-text light\",\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 819\n                    },\n                    __self: this\n                  }, \" \", cardTitle, \" \"), cardSub));\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return React.createElement(\"footer\", {\n        className: \"page-footer font-small indigo\",\n        style: FooterStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 829\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        style: {\n          marginLeft: \"15px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 830\n        },\n        __self: this\n      }, children));\n    };\n\n    _this.state = {\n      content: \"\",\n      widgets: \"\",\n      ReadingRisk: false,\n      ContentHeading: \"\",\n      ContentBody: \"\",\n      HideSearchBar: true,\n      SearchText: \"\",\n      SearchModal: false\n    };\n    _this.HeaderFunc = _this.HeaderFunc.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadContent = _this.reloadContent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadWidgets = _this.reloadWidgets.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.SideNavFunc = _this.SideNavFunc.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.Modal = _this.Modal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.BuildStyleVar = _this.BuildStyleVar.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.iFrameModal = _this.iFrameModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.linkCheck = _this.linkCheck.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.FindPath = _this.FindPath.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.FindCorrespondingId = _this.FindCorrespondingId(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //#region Helpers\n\n\n  _createClass(App, [{\n    key: \"linkCheck\",\n    value: function linkCheck(nodeID, isContentNode) {\n      for (var q in parsedData) {\n        for (var w in parsedData[q]) {\n          if (w === \"links\") {\n            for (var e in parsedData[q][w]) {\n              if (parsedData[q][w][e] !== undefined) {\n                if (parsedData[q][w][e][\"ideaIdFrom\"] !== undefined && parsedData[q][w][e][\"ideaIdTo\"] !== undefined) {\n                  if (isContentNode === true) {\n                    if (nodeID === parsedData[q][w][e][\"ideaIdTo\"]) {\n                      alert(\"To Node Id : \" + parsedData[q][w][e][\"ideaIdTo\"]);\n                      return true;\n                    } else {\n                      return false;\n                    }\n                  } else {\n                    if (nodeID === parsedData[q][w][e][\"ideaIdFrom\"]) {\n                      alert(\"From Node Id : \" + parsedData[q][w][e][\"ideaIdFrom\"]);\n                      return true;\n                    } else {\n                      return false;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"FindCorrespondingId\",\n    value: function FindCorrespondingId(NodeId) {\n      for (var q in parsedData) {\n        for (var w in parsedData[q]) {\n          if (w === \"links\") {\n            for (var e in parsedData[q][w]) {\n              if (parsedData[q][w][e] !== undefined) {\n                if (parsedData[q][w][e][\"ideaIdFrom\"] !== undefined && parsedData[q][w][e][\"ideaIdTo\"] !== undefined) {\n                  alert(\"Node ID : \" + NodeId + \" || From : \" + parsedData[q][w][e][\"ideaIdFrom\"] + \" || To : \" + parsedData[q][w][e][\"ideaIdTo\"]);\n\n                  if (parsedData[q][w][e][\"ideaIdFrom\"] === NodeId) {\n                    return parsedData[q][w][e][\"ideaIdTo\"];\n                  } else if (parsedData[q][w][e][\"ideaIdTo\"] === NodeId) {\n                    return parsedData[q][w][e][\"ideaIdFrom\"];\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"FindPath\",\n    value: function FindPath(NodeId) {\n      for (var x in parsedData.default.ideas) {\n        for (var y in parsedData.default.ideas[x]) {\n          if (parsedData.default.ideas[x][y] === \"Content\") {\n            if (parsedData.default.ideas[x].ideas !== \"undefined\") {\n              for (var z in parsedData.default.ideas[x].ideas) {\n                //alert(\"Current Node ID : \" + parsedData.default.ideas[x].ideas[z].id + \" || Sought Node ID : \" + NodeId)\n                if (parsedData.default.ideas[x].ideas[z].id === NodeId) {\n                  alert(\"Found It!!!\");\n                  return parsedData.default.ideas[x].ideas[z];\n                } else {\n                  for (var v in parsedData.default.ideas[x].ideas[z]) {\n                    if (parsedData.default.ideas[x].ideas[z][v].id === NodeId) {\n                      alert(\"Found it A\");\n                      return parsedData.default.ideas[x].ideas[z][v];\n                    } else {\n                      if (parsedData.default.ideas[x].ideas[z][v].ideas !== undefined) {\n                        for (var b in parsedData.default.ideas[x].ideas[z][v].ideas) {\n                          if (parsedData.default.ideas[x].ideas[z][v].ideas[b].id === NodeId) {\n                            alert(\"Found it B\");\n                            return parsedData.default.ideas[x].ideas[z][v].ideas[b];\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"SearchModal\",\n    value: function SearchModal() {\n      alert(\"Hi!\");\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        SearchText: event.target.value\n      });\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(modal) {\n      if (modal.toString() !== \"searchBar\") {\n        var modalNumber = modal.replace(\"#\", \"\");\n        this.setState(_defineProperty({}, modalNumber, !this.state[modalNumber]));\n      } else {\n        this.setState(_defineProperty({}, \"HideSearchBar\", !this.state[\"HideSearchBar\"]));\n      }\n    }\n  }, {\n    key: \"reloadContent\",\n    value: function reloadContent(path, type) {\n      //See if we are going to search the tree or if we will receive the content somehow else \n      if (type.toString() === \"search\") {\n        //Create a modal instance here with an iframe and pop it\n        this.toggle('searchBar');\n      } else {\n        this.setState({\n          content: path\n        }); //, {contentType: type}) \n      }\n    }\n  }, {\n    key: \"reloadWidgets\",\n    value: function reloadWidgets(content) {\n      this.setState({\n        widgets: content\n      });\n    }\n  }, {\n    key: \"extractLink\",\n    value: function extractLink(str) {\n      var link;\n\n      if (str.indexOf(\"http\") > -1) {\n        link = str.split('http')[1];\n      } else {\n        link = \"\";\n      }\n\n      return \"http\" + link;\n    }\n  }, {\n    key: \"isImage\",\n    value: function isImage(str) {\n      if (str.toString().includes(\"drive.google\")) //Check if it is an image\n        {\n          return true;\n        }\n\n      return false;\n    }\n  }, {\n    key: \"googleImage\",\n    value: function googleImage(link) {\n      return link.replace(\"open\", \"uc\");\n    }\n  }, {\n    key: \"Modal\",\n    value: function Modal(header, innerText, id) {\n      var _this2 = this;\n\n      var CustomModal = function CustomModal() {\n        return React.createElement(_Modal, {\n          isOpen: _this2.state[id],\n          toggle: function toggle() {\n            return _this2.toggle(id);\n          },\n          size: \"fluid\",\n          background: \"grey\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202\n          },\n          __self: this\n        }, React.createElement(ModalHeader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }, header), React.createElement(ModalBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"text-black modal-innet-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205\n          },\n          __self: this\n        }, innerText)), React.createElement(ModalFooter, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          },\n          __self: this\n        }, React.createElement(Button, {\n          color: \"secondary\",\n          onClick: function onClick() {\n            return _this2.toggle(id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208\n          },\n          __self: this\n        }, \"Close\"), ' '));\n      };\n\n      return ReactDOM.createPortal(React.createElement(CustomModal, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }), document.getElementById('root'));\n    }\n  }, {\n    key: \"BuildStyleVar\",\n    value: function BuildStyleVar(NodePath) {\n      // Here we are going to get the path to the node (will prob be a attr node) containing the styles \n      // for the tag/content and process it. Will return a var with all the style's structured and correct\n      var Style = \"\";\n\n      for (var t in NodePath) {\n        if (t === \"attr\") {\n          for (var y in NodePath[t]) {\n            if (y === \"style\") {\n              for (var u in NodePath[t][y]) {\n                Style += u.toString() + \":\" + NodePath[t][y][u].toString() + \";\";\n              }\n            }\n          }\n        }\n      } // 2ⁿᵈ step logic\n\n\n      var camelize = function camelize(string) {\n        return string.replace(/-([a-z])/gi, function (s, group) {\n          return group.toUpperCase();\n        });\n      }; // 1ˢᵗ step logic which calls the 2ⁿᵈ step logic\n\n\n      var style2object = function style2object(style) {\n        return style.split(';').filter(function (s) {\n          return s.length;\n        }).reduce(function (a, b) {\n          var keyValue = b.split(':');\n          a[camelize(keyValue[0])] = keyValue[1];\n          return a;\n        }, {});\n      };\n\n      return style2object(Style);\n    }\n  }, {\n    key: \"iFrameModal\",\n    value: function iFrameModal(Header, iFrameLink, modalId) {\n      var _this3 = this;\n\n      var iFrameStyle = {\n        position: \"fixed\",\n        top: \"0px\",\n        left: \"0px\",\n        bottom: \"0px\",\n        right: \"0px\",\n        width: \"100%\",\n        height: \"100%\",\n        border: \"none\",\n        margin: \"0\",\n        padding: \"0\",\n        overflow: \"hidden\",\n        index: '999999'\n      };\n\n      var ReturnModal = function ReturnModal() {\n        return React.createElement(_Modal, {\n          size: \"lg\",\n          \"aria-hidden\": \"true\",\n          onClickAway: function onClickAway() {\n            return _this3.toggle(modalId);\n          },\n          effect: \"fadeInUp\",\n          isOpen: _this3.state[modalId.replace(\"#\", \"\")],\n          toggle: function toggle() {\n            return _this3.toggle(modalId);\n          },\n          background: \"grey\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          },\n          __self: this\n        }, React.createElement(ModalHeader, {\n          size: \"lg\",\n          className: \"black-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265\n          },\n          __self: this\n        }, \"Terms and Conditions\"), React.createElement(\"iframe\", {\n          src: iFrameLink,\n          title: \"#\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266\n          },\n          __self: this\n        }));\n      };\n\n      return React.createElement(ReturnModal, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      });\n    } //#endregion\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _React$createElement;\n\n      var modal = document.getElementById('searchiFrame');\n\n      window.onclick = function (event) {\n        if (event.target === modal) {\n          alert(\"outside click!\");\n          modal.style.display = \"none\";\n        }\n      }; // Get the modal\n      //  var modal = document.getElementById('searchiFrame');\n\n\n      modal = document.getElementById('searchiFrame'); // When the user clicks anywhere outside of the modal, close it\n\n      window.onclick = function (event) {\n        if (event.target === modal) {\n          modal.style.display = \"searchiFrame\";\n        }\n      };\n\n      return React.createElement(\"div\", (_React$createElement = {\n        className: \"App\"\n      }, _defineProperty(_React$createElement, \"className\", this.state[\"HideSearchBar\"] ? 'animateReverse' : 'animate'), _defineProperty(_React$createElement, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement), this.SideNavFunc(), this.HeaderFunc(), this.ContentFunc(this.state.content), this.ContentWidgets(this.state.widgets), this.FooterFunc());\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\LanceM\\Documents\\Javascript\\SAEON_Work\\client\\src\\App.js"],"names":["React","Component","ReactDOM","parsedData","SideNav","NavItem","NavIcon","NavText","Button","Modal","ModalBody","ModalHeader","ModalFooter","Tooltip","App","props","HeaderFunc","children","HeaderLogo","hrefLink","iframeSrc","base","fontSize","color","toggle","state","SearchText","handleChange","textAlign","background","border","SearchModal","position","top","left","bottom","right","width","height","margin","padding","overflow","index","toString","x","default","ideas","y","NavBarStyles","BuildStyleVar","z","title","ddl","innerArray","inner","ddlStyle","indent","push","id","linkCheck","length","count","isImage","googleImage","extractLink","SideNavFunc","InnerDdl","Items","Base","o","u","i","menuItemTitle","menuItemIcon","menuItemTooltip","w","ModalId","replace","modalText","innerItemType","newTabLink","attr","r","p","text","innerJSON","JSON","parse","undefined","type","link","alert","contentVar","FindCorrespondingId","reloadContent","note","menuItem","icon","tooltip","ContentFunc","Page","DynamicContent","Heading","Subtext","ButtonText","g","j","k","ContentWidgets","Content","Widgets","d","Description","Header","l","c","MessengerVar","FooterFunc","FooterStyle","cardTitle","cardSub","linkList","t","split","iFrameModal","marginLeft","content","widgets","ReadingRisk","ContentHeading","ContentBody","HideSearchBar","bind","reloadWidgets","FindPath","nodeID","isContentNode","q","e","NodeId","v","b","event","setState","target","value","modal","modalNumber","path","str","indexOf","includes","header","innerText","CustomModal","createPortal","document","getElementById","NodePath","Style","camelize","string","s","group","toUpperCase","style2object","style","filter","reduce","a","keyValue","iFrameLink","modalId","iFrameStyle","ReturnModal","window","onclick","display"],"mappings":"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","sourcesContent":["  import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport './CustomCSS.css'; \nimport * as parsedData from './JSON_Dat.json';\nimport SideNav, { NavItem, NavIcon, NavText } from '@trendmicro/react-sidenav';\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from 'mdbreact';\nimport '@trendmicro/react-sidenav/dist/react-sidenav.css';\n\nimport { Tooltip } from '@trendmicro/react-tooltip';\nimport '@trendmicro/react-tooltip/dist/react-tooltip.css';\n\n//These imports are killing the modals\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nclass App extends Component { \n\nconstructor(props) {\n  super(props);\n  this.state = {content: \"\", widgets: \"\", ReadingRisk: false, ContentHeading: \"\", ContentBody: \"\", HideSearchBar: true, SearchText: \"\", SearchModal: false };\n  this.HeaderFunc = this.HeaderFunc.bind(this)\n  this.reloadContent = this.reloadContent.bind(this)\n  this.reloadWidgets = this.reloadWidgets.bind(this)\n  this.SideNavFunc = this.SideNavFunc.bind(this)\n  this.Modal = this.Modal.bind(this)\n  this.BuildStyleVar = this.BuildStyleVar.bind(this)\n  this.toggle = this.toggle.bind(this)\n  this.handleChange = this.handleChange.bind(this)\n  this.iFrameModal = this.iFrameModal.bind(this);\n  this.linkCheck = this.linkCheck.bind(this);\n  this.FindPath = this.FindPath.bind(this);\n  this.FindCorrespondingId = this.FindCorrespondingId(this);\n} \n\n//#region Helpers\n\nlinkCheck(nodeID, isContentNode) {\n  for (let q in parsedData) {\n    for (let w in parsedData[q]) {\n      if (w === \"links\") {\n        for (let e in parsedData[q][w]) {\n          if (parsedData[q][w][e] !== undefined) {\n            if (parsedData[q][w][e][\"ideaIdFrom\"] !== undefined && parsedData[q][w][e][\"ideaIdTo\"] !== undefined) {\n              \n              if (isContentNode === true) {\n                if (nodeID === parsedData[q][w][e][\"ideaIdTo\"]) {\n                  alert(\"To Node Id : \" + parsedData[q][w][e][\"ideaIdTo\"])\n                  return true;\n                }\n                else{\n                  return false;\n                }\n              }\n              else {\n                if (nodeID === parsedData[q][w][e][\"ideaIdFrom\"]) {\n                  alert(\"From Node Id : \" + parsedData[q][w][e][\"ideaIdFrom\"])\n                  return true;\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n          } \n        }\n      }\n    }\n  }\n  return false;\n}\n\nFindCorrespondingId(NodeId) {\n  for (let q in parsedData) {\n    for (let w in parsedData[q]) {\n      if (w === \"links\") {\n        for (let e in parsedData[q][w]) {\n          if (parsedData[q][w][e] !== undefined) {\n            if (parsedData[q][w][e][\"ideaIdFrom\"] !== undefined && parsedData[q][w][e][\"ideaIdTo\"] !== undefined) {\n              alert(\"Node ID : \" + NodeId + \" || From : \" + parsedData[q][w][e][\"ideaIdFrom\"] + \" || To : \" + parsedData[q][w][e][\"ideaIdTo\"])\n              if (parsedData[q][w][e][\"ideaIdFrom\"] === NodeId) {\n                return parsedData[q][w][e][\"ideaIdTo\"];\n              }\n              else if (parsedData[q][w][e][\"ideaIdTo\"] === NodeId) {\n                return parsedData[q][w][e][\"ideaIdFrom\"];\n              }\n            }\n          } \n        }\n      }\n    }\n  }\n}\n\nFindPath(NodeId) { \n  for (let x in parsedData.default.ideas) {\n    for (let y in parsedData.default.ideas[x]) { \n      if (parsedData.default.ideas[x][y] === \"Content\") {\n        if(parsedData.default.ideas[x].ideas !== \"undefined\") {\n          for (let z in parsedData.default.ideas[x].ideas) {\n            //alert(\"Current Node ID : \" + parsedData.default.ideas[x].ideas[z].id + \" || Sought Node ID : \" + NodeId)\n\n            if (parsedData.default.ideas[x].ideas[z].id === NodeId) {\n              alert(\"Found It!!!\")\n\n              return parsedData.default.ideas[x].ideas[z];\n            }\n            else {\n              for (let v in parsedData.default.ideas[x].ideas[z]){\n                if (parsedData.default.ideas[x].ideas[z][v].id === NodeId) {\n                  alert(\"Found it A\");\n                  \n                  return parsedData.default.ideas[x].ideas[z][v];\n                }\n                else {\n                  if (parsedData.default.ideas[x].ideas[z][v].ideas !== undefined) {\n                    for (let b in parsedData.default.ideas[x].ideas[z][v].ideas) {\n                      if (parsedData.default.ideas[x].ideas[z][v].ideas[b].id === NodeId) {\n                        alert(\"Found it B\");\n\n                        return parsedData.default.ideas[x].ideas[z][v].ideas[b];\n                      }\n                    }\n                  } \n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nSearchModal() {\n  alert(\"Hi!\") \n}\n\nhandleChange(event) {\n  this.setState({SearchText: event.target.value});\n}\n\ntoggle(modal) {\n  \n  if (modal.toString() !== \"searchBar\") {\n    let modalNumber = modal.replace(\"#\",\"\")\n    this.setState({\n      [modalNumber]: !this.state[modalNumber]\n    });\n  }\n  else {\n    this.setState({ [\"HideSearchBar\"]: !this.state[\"HideSearchBar\"] });\n  }\n}\n\nreloadContent(path, type) {\n  \n  //See if we are going to search the tree or if we will receive the content somehow else \n    if (type.toString() === \"search\"){\n      //Create a modal instance here with an iframe and pop it\n      this.toggle('searchBar')\n    }\n    else {\n      this.setState({content : path})//, {contentType: type}) \n    }\n}\n\nreloadWidgets(content) {\n  this.setState({widgets : content})\n}\n\nextractLink(str) {\n  var link;\n\n  if (str.indexOf(\"http\") > -1) {\n      link = str.split('http')[1];\n  }\n  else {\n      link = \"\";\n  }\n\n  return \"http\" + link;\n}\n\nisImage(str) {\n  if (str.toString().includes(\"drive.google\")) //Check if it is an image\n  {\n    return true;\n  }\n\n  return false;\n}\n\ngoogleImage(link){\n  return link.replace(\"open\", \"uc\");\n} \n \nModal(header, innerText, id) {\n  \n    const CustomModal = () => \n    (<Modal isOpen={this.state[id]} toggle={() => this.toggle(id)} size=\"fluid\" background=\"grey\">\n      <ModalHeader>{header}</ModalHeader>\n      <ModalBody>\n        <div className=\"text-black modal-innet-text\">{innerText}</div>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={() => this.toggle(id)}>Close</Button>{' '}\n      </ModalFooter>\n     </Modal>); \n\n  return ReactDOM.createPortal( <CustomModal/>, document.getElementById('root'));\n}\n\nBuildStyleVar(NodePath){\n  // Here we are going to get the path to the node (will prob be a attr node) containing the styles \n  // for the tag/content and process it. Will return a var with all the style's structured and correct\n\n  var Style = \"\"\n \n  for (let t in NodePath) {\n    if (t === \"attr\"){\n      for (let y in NodePath[t]) {\n        if (y === \"style\") {\n          for (let u in NodePath[t][y]) {\n            Style += (u.toString() + \":\" + NodePath[t][y][u].toString() + \";\");\n          }\n        }\n      }\n    }\n  }\n\n  // 2ⁿᵈ step logic\n  const camelize = (string) =>  string.replace(/-([a-z])/gi,(s, group) =>  group.toUpperCase());\n  \n  // 1ˢᵗ step logic which calls the 2ⁿᵈ step logic\n  const style2object = (style) => style.split(';').filter(s => s.length)\n          .reduce((a, b) => {\n            const keyValue = b.split(':');\n            a[camelize(keyValue[0])] = keyValue[1] ; \n            return a;\n          } ,{}); \n\n  return style2object(Style)\n}\n\niFrameModal(Header, iFrameLink, modalId) {\n\n  var iFrameStyle = ({ \n                        position: \"fixed\", \n                        top: \"0px\", \n                        left: \"0px\",\n                        bottom: \"0px\", \n                        right: \"0px\", \n                        width: \"100%\", \n                        height: \"100%\",\n                        border: \"none\", \n                        margin: \"0\", \n                        padding: \"0\", \n                        overflow: \"hidden\", \n                        index: '999999' \n                      });\n\n  const ReturnModal = () => (<Modal size=\"lg\" aria-hidden=\"true\" onClickAway={() => this.toggle(modalId)} effect=\"fadeInUp\" isOpen={this.state[modalId.replace(\"#\",\"\")]} toggle={() => this.toggle(modalId)} background=\"grey\">\n                               <ModalHeader size=\"lg\" className=\"black-text\">{\"Terms and Conditions\"}</ModalHeader>\n                               <iframe src={ iFrameLink } title=\"#\"></iframe>\n                             </Modal>);\n\n  return (<ReturnModal/>);\n}\n\n//#endregion\n\nHeaderFunc = () => {\n  //Remeber to check for the header logo\n  const children = []\n  var HeaderLogo, hrefLink = \"http://app01.saeon.ac.za/sarva3/\", iframeSrc = 'http://www.sasdi.net/search.aspx?anytext='\n  const base = (<nav className=\"white\" role=\"navigation\">\n                  <div className=\"nav-wrapper container\">\n                    <a id=\"logo-container\" href={ hrefLink } rel=\"noopener nereferrer\" target='_blank' className=\"brand-logo\">&nbsp; SARVA 3.0</a>\n                    <ul className=\"right hide-on-med-and-down\" key=\"HeaderFuncKey\">\n                      {children} \n                      <i className=\"glyphicon glyphicon-search\" style={{ fontSize: '1.75em', color: 'rgb(104, 103, 103)'}} onClick={() => this.toggle('searchBar')} />\n                    </ul>\n                    <input className={ this.state[\"HideSearchBar\"] ? 'hidden black-text' : 'black-text'} type=\"text\" name=\"Search\" value={this.state.SearchText} onChange={this.handleChange} ></input>\n                    <i className='hidden glyphicon glyphicon-search' style={{ fontSize: '1.75em', color: 'rgb(104, 103, 103)'}} />\n                    <div style={{ textAlign: 'center' }}>\n                      <button className={ this.state[\"HideSearchBar\"] ? 'hidden glyphicon glyphicon-search' : 'glyphicon glyphicon-search' } style={{ fontSize: '1.75em', color: 'black', background: 'transparent', border: 'none' }} onClick={ () => this.toggle(\"SearchModal\")}></button>\n                    </div>\n                    <Modal id='searchiFrame' onClickAway={() => (this.SearchModal())} effect=\"fadeInUp\" isOpen={this.state[\"SearchModal\"]} toggle={() => this.toggle(\"SearchModal\")} size=\"lg\" background=\"grey\">\n                        <iframe style={{ position: \"fixed\", top: \"0px\", left: \"0px\", bottom: \"0px\", right: \"0px\", width: \"100%\", height: \"100%\", border: \"none\", margin: \"0\", padding: \"0\", overflow: \"hidden\", index: '999999' }} src={iframeSrc + this.state.SearchText.toString() + '&noframe=true'} title=\"#\"></iframe>\n                    </Modal>\n                  </div>\n                </nav>)\n  \n  for (let x in parsedData.default.ideas){\n    for (let y in parsedData.default.ideas[x])\n    { \n      if (parsedData.default.ideas[x][y] === \"NavBar\") \n      {\n        var NavBarStyles = this.BuildStyleVar(parsedData.default.ideas[x]);\n        if(parsedData.default.ideas[x].ideas !== \"undefined\"){\n          for (let z in parsedData.default.ideas[x].ideas){\n            if (parsedData.default.ideas[x].ideas[z].title === \"Menu\"){\n              for (let ddl in parsedData.default.ideas[x].ideas[z].ideas){\n                const innerArray = []\n                if (parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas !== \"undefined\")\n                {\n                  for (let inner in parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas)\n                  {\n                    const ddlStyle = { \n                                        fontSize: '12px',\n                                        color: 'red',\n                                        width: '100%',\n                                        indent: '50px'\n                                     }; \n                    \n                    innerArray.push(<li style={ddlStyle} key={parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas[inner].id}><a href=\"www.google.com\" >{parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas[inner].title}</a></li>)\n                    this.linkCheck(parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas[inner].id);\n                    // this.FindPath(parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas[inner].id);\n                  }\n                }\n                if (innerArray.length > 0)  \n                {\n                  children.push(<li className=\"sub-menu-parent\" key={ parsedData.default.ideas[x].ideas[z].ideas[ddl].id } tab-index=\"0\" style={NavBarStyles}>\n                                  <a href=\"www.google.com\">{parsedData.default.ideas[x].ideas[z].ideas[ddl].title} &#8659;</a>\n                                  <ul className=\"sub-menu\">\n                                    {innerArray}\n                                  </ul>\n                                </li>)\n                }\n                else {\n                  this.linkCheck(parsedData.default.ideas[x].ideas[z].ideas[ddl].id);\n                  // this.FindPath(parsedData.default.ideas[x].ideas[z].ideas[ddl].id);\n                  children.push(<li styled=\"true\" key={ parsedData.default.ideas[x].ideas[z].ideas[ddl].id }><a href=\"www.google.com\">{parsedData.default.ideas[x].ideas[z].ideas[ddl].title}</a></li>)\n                }\n              }\n            }\n            else if (parsedData.default.ideas[x].ideas[z].title === \"Logo\"){\n              for (let count in parsedData.default.ideas[x].ideas[z].ideas) {\n                if (this.isImage(parsedData.default.ideas[x].ideas[z].ideas[count].title)){\n                  HeaderLogo = this.googleImage(this.extractLink(parsedData.default.ideas[x].ideas[z].ideas[count].title))\n                }\n              }\n              children.push(<img id=\"menu-logo\" alt=\"img not loaded\" src={HeaderLogo}></img> )\n            }\n          } \n        }\n      }\n    }\n  }\n  return base \n}\n\nSideNavFunc = () => {\n\nvar InnerDdl = [], Items = [];\n\nconst Base = <SideNav className=\"sidenav\"><SideNav.Toggle /><SideNav.Nav>{ Items }</SideNav.Nav></SideNav>\n\nfor (let o in parsedData.default.ideas)\n{\n  for (let u in parsedData.default.ideas[o])\n  {\n    if (parsedData.default.ideas[o][u] === \"SideNav\") \n    {\n      if(parsedData.default.ideas[o].ideas !== \"undefined\")\n      {\n        for (let i in parsedData.default.ideas[o].ideas)\n        {\n          //Rember to check if you need to initialize anything\n\n          //Here check for a glyphicon, using home for now\n          var menuItemTitle = \"\", menuItemIcon = \"\", menuItemTooltip = \"\";\n\n          if (parsedData.default.ideas[o].ideas[i].ideas !== \"undefined\")\n          {\n            InnerDdl = []\n            for (let w in parsedData.default.ideas[o].ideas[i].ideas)\n            {\n              //Check what type it is, if its a modal, new tab, replace content and breadcrumb\n              this.linkCheck(parsedData.default.ideas[o].ideas[i].ideas[w].id, false);\n\n              // #region Set Modal var's (if modal)\n              const ModalId = '#' + parsedData.default.ideas[o].ideas[i].ideas[w].title.replace(/\\s/g, '');\n              var modalText = \"\", innerItemType = \"\", newTabLink = \"\";\n              // #endregion\n\n              // #region Read the inner-text JSON\n              if (parsedData.default.ideas[o].ideas[i].ideas[w].attr !== \"undefined\")\n              {\n                for (let r in parsedData.default.ideas[o].ideas[i].ideas[w]){\n                  for ( let p in parsedData.default.ideas[o].ideas[i].ideas[w][r]){\n                    for (let text in parsedData.default.ideas[o].ideas[i].ideas[w][r][p]){\n                      if (text === \"text\"){\n                        \n                        // this will now possibly contain JSON\n\n                        var innerJSON = JSON.parse(parsedData.default.ideas[o].ideas[i].ideas[w][r][p][text])\n                        \n                        if (innerJSON !== undefined) {\n                          modalText = innerJSON.text;\n                          innerItemType = innerJSON.type;\n                          \n                          if (innerJSON.link !== undefined) {\n                            newTabLink = innerJSON.link;\n                          }\n                        }\n                        else {\n                          modalText = parsedData.default.ideas[o].ideas[i].ideas[w][r][p][text];\n                        }\n                      } \n                    }\n                  }\n                }\n              }\n              // #endregion\n\n              if (innerItemType.toString() === \"modal\") {\n                // If Modal\n                InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} key={parsedData.default.ideas[o].ideas[i].ideas[w].id} onClick={() => this.toggle(ModalId)}>\n                                <NavText style={{color: 'black !important'}}>\n                                  <a type=\"button\" href=\"/#\" className=\"black-text\">{parsedData.default.ideas[o].ideas[i].ideas[w].title}</a>\n                                  {this.Modal(parsedData.default.ideas[o].ideas[i].ideas[w].title, modalText, parsedData.default.ideas[o].ideas[i].ideas[w].title.replace(/\\s/g, ''))}\n                                </NavText>\n                              </NavItem>)\n              }\n              else if (innerItemType === \"tab\")\n              {\n                //var link = \"http://www.sasdi.net/search.aspx?anytext=energy&noframe=true\"\n                // If new tab link  \n                InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} key={parsedData.default.ideas[o].ideas[i].ideas[w].id} >\n                                <NavText style={{color: 'black !important'}}>\n                                <a href={ newTabLink } rel=\"noopener nereferrer\" className=\"black-text\" target='_blank'>{parsedData.default.ideas[o].ideas[i].ideas[w].title}</a>\n                                </NavText>\n                              </NavItem>)\n              }\n              else if (innerItemType === \"content\") // \n              {\n                //var contentNodePath = this.FindPath(parsedData.default.ideas[o].ideas[i].ideas[w].id)\n                // If content reload with new breadcrumb\n                //alert(parsedData.default.ideas[o].ideas[i].ideas[w].id)\n                if (this.linkCheck(parsedData.default.ideas[o].ideas[i].ideas[w].id, false))\n                {\n                  alert(\"TEst : parsedData.default.ideas[o].ideas[i].ideas[w].id\")\n                  var contentVar = this.FindCorrespondingId(parsedData.default.ideas[o].ideas[i].ideas[w].id);\n\n                  alert(contentVar)\n\n                  InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} key={parsedData.default.ideas[o].ideas[i].ideas[w].id} onClick= {() => this.reloadContent(parsedData.default.ideas[o].ideas[i].ideas[w].id, \"content\")}>\n                                  <NavText style={{color: 'black !important'}}>\n                                  <a href=\"https://#\" >{parsedData.default.ideas[o].ideas[i].ideas[w].title}</a>\n                                  </NavText>\n                                </NavItem>)\n                }\n                else {\n                  InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} key={parsedData.default.ideas[o].ideas[i].ideas[w].id} onClick= {() => this.reloadContent(parsedData.default.ideas[o].ideas[i].ideas[w].id, \"content\")}>\n                                  <NavText style={{color: 'black !important'}}>\n                                  <a href=\"https://#\" >{parsedData.default.ideas[o].ideas[i].ideas[w].title}</a>\n                                  </NavText>\n                                </NavItem>)\n                }\n              }\n              else {\n                InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} key={parsedData.default.ideas[o].ideas[i].ideas[w].id} onClick= {() => this.reloadContent(parsedData.default.ideas[o].ideas[i].ideas[w].title, \"content\")}>\n                                <NavText style={{color: 'black !important'}}>\n                                <a href=\"https://#\" >{parsedData.default.ideas[o].ideas[i].ideas[w].title}</a>\n                                </NavText>\n                              </NavItem>)\n              }\n            }\n\n            if (parsedData.default.ideas[o].ideas[i].attr.note.text !== undefined) {\n              var menuItem = JSON.parse(parsedData.default.ideas[o].ideas[i].attr.note.text)\n\n              if (menuItem.title !== undefined) {\n                menuItemTitle = menuItem.title;\n              }\n\n              if (menuItem.icon !== undefined) {\n                menuItemIcon = menuItem.icon;\n              }\n\n              if (menuItem.tooltip !== undefined) {\n                menuItemTooltip = menuItem.tooltip;\n              }\n            }\n\n            Items.push(<NavItem eventKey={ parsedData.default.ideas[o].ideas[i].id }>\n                        <NavIcon>\n                          <i className={ menuItemIcon } style={{ fontSize: '1.75em', color: '#fff' }} />\n                        </NavIcon>\n                        <NavText>\n                          { menuItemTooltip.length === 0 ? (<span>{ menuItemTitle }</span>) : (<Tooltip placement=\"top\" content={ menuItemTooltip }><span>{ menuItemTitle }</span></Tooltip>)}\n                        </NavText>\n                        {InnerDdl}\n                      </NavItem>) \n          }\n          else{ \n            \n            if (parsedData.default.ideas[o].ideas[i].attr.note.text !== undefined) {\n              // var menuItem = JSON.parse(parsedData.default.ideas[o].ideas[i].attr.note.text)\n              menuItem = JSON.parse(parsedData.default.ideas[o].ideas[i].attr.note.text)\n\n              menuItemTitle = menuItem.title;\n              menuItemIcon = menuItem.icon;\n              menuItemTooltip = menuItem.tooltip;\n            }\n\n            Items.push(<NavItem eventKey={ parsedData.default.ideas[o].ideas[i].id }>\n                        <NavIcon>\n                          <i className={ menuItemIcon } style={{ fontSize: '1.75em' }}/>\n                        </NavIcon>\n                        <NavText>\n                          {/* <Tooltip placement=\"top\" content={ menuItemTooltip }><span>{ menuItemTitle }</span></Tooltip> */}\n                          { menuItemTooltip.length === 0 ? (<span>{ menuItemTitle }</span>) : (<Tooltip placement=\"top\" content={ menuItemTooltip }><span>{ menuItemTitle }</span></Tooltip>)}\n                        </NavText>\n                      </NavItem>)\n          }\n        }\n      }\n    }\n  }\n}\n\n\nreturn (Base)\n}\n\nContentFunc = (Page) => {\n  //Make use of page var to reload page content\n  //So in here we will receive a node title, check the \"Content\" branch and iterate through its data where the node matches the Title\n\n  ////////////////////////////////////////////////////////////////////////\n  // Hoping to load a content node by it's id\n\n  // if (Page !== \"\" || Page !== undefined) {\n    // Call \"FindPath\", hoping I can get it to return the path to the node, which we can then exploit \n    //this.FindPath(\"27.5661.e19774766-e780.6e09bd81a\")\n\n  // }\n\n  ////////////////////////////////////////////////////////////////////////\n  \n\n  //See if the new page has/needs widgets then load it accordingly here\n\n  var DynamicContent = []\n\n  if (Page !== \"\") {\n    if (this.state[\"content\"] !== null) {\n      for (let x in parsedData.default.ideas) {\n        for (let y in parsedData.default.ideas[x]) { \n          if (parsedData.default.ideas[x][y] === \"Content\") {\n            if(parsedData.default.ideas[x].ideas !== \"undefined\") {\n              for (let z in parsedData.default.ideas[x].ideas) {\n                // Initialize your vairables\n                var Heading = \"\", Subtext = \"\", ButtonText = \"\"\n                \n                for (let r in parsedData.default.ideas[x].ideas[z]) {\n                  // Get the header for this section's content\n                  if (r === \"title\") {\n                    Heading = parsedData.default.ideas[x].ideas[z][r]\n                  }\n                  \n                  // Get the actual content for the section\n                  if (r === \"attr\") {\n                    for (let w in parsedData.default.ideas[x].ideas[z][r]) {\n                      for (let g in parsedData.default.ideas[x].ideas[z][r][w]) {\n                        if (g === \"text\") {\n                          Subtext = <div class=\"row center\">\n                                      <h5 class=\"header col s12 text-darken-4\">{ parsedData.default.ideas[x].ideas[z][r][w][g] }</h5>\n                                    </div>\n                        }\n                      }\n                    }\n                  }\n\n                  //Check the \"Ideas\" for buttons\n                  for (let j in parsedData.default.ideas[x].ideas[z].ideas) {\n                    for (let k in parsedData.default.ideas[x].ideas[z].ideas[j]) {\n                      if (k === \"title\") {\n                        ButtonText = parsedData.default.ideas[x].ideas[z].ideas[j][k]\n                      }\n                    }\n                  }\n\n                }\n\n                if (Heading !== \"Widgets\" ){\n                  if (ButtonText.length === 0) {\n                    DynamicContent.push(<div><h2 class=\"header center text-darken-4\">{ Heading }</h2>{Subtext}</div>)\n                  }\n                  else if (ButtonText.length > 0) {\n                    DynamicContent.push(<div class=\"parallax-container valign-wrapper\">\n                                          <div class=\"section no-pad-bot\">\n                                            <div class=\"container\">\n                                              <div class=\"row center\">\n                                                <h2 class=\"header center brown-text text-darken-3\">{ Heading }</h2>\n                                                <h5 class=\"header col s12 brown-text text-darken-3\">{ Subtext }</h5>\n                                              </div>\n                                              <div class=\"row center\">\n                                                <a href=\"#data-modal\" id=\"download-button\" type=\"button\" class=\"btn btn-primary\">{ ButtonText }</a>\n                                              </div>\n                                              <br/>\n                                            </div>\n                                          </div>\n                                        </div>); \n                  }\n                }\n\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  var Base = <div id=\"index-banner\" className=\"parallax-container\" >\n                  <div className=\"section no-pad-bot\">\n                    <div className=\"container\">\n                      <br></br>\n                      <br></br> \n                      { DynamicContent }\n                    </div>\n                  </div> \n                </div>\n\n  return Base\n}\n\nContentWidgets = (Content) => {\n\n  //#region Static Widgets\n  // const Widgets = <div class=\"section\">\n  //                   <div class=\"row\">\n  //                     <div class=\"col s12 m4\">\n  //                       <div class=\"icon-block center\">\n  //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"search-modal\" onClick={ () => this.reloadContent('Search')}>Search</button>   \n  //                         <h5 class=\"center\">Search and Discover Resources</h5>\n  //                         <p class=\"light center\">Use simple or advanced tools to search for data meeting your criteria.</p>\n  //                       </div>\n  //                     </div>\n\n  //                     <div class=\"col s12 m4\">\n  //                       <div class=\"icon-block center\">\n  //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"theme-modal\" onClick={ () => this.reloadContent('Themes')}>Themes</button>            \n  //                         <h5 class=\"center\">Explore Available Resources by Sector or Theme</h5>\n  //                         <p class=\"light center\">Browse, preview, and access data and narratives in popular collections and in common themes.</p>\n  //                       </div>\n  //                     </div>\n\n  //                     <div class=\"col s12 m4\">\n  //                       <div class=\"icon-block center\">\n  //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"contr-modal\">Contribute</button>  \n  //                         <h5 class=\"center\">Tell Us About Your Area of Interest</h5>\n  //                         <p class=\"light center\"><a href=\"www.google.com\">Register</a> as a user and contribute data, assessments, and media.</p>\n  //                       </div>\n  //                     </div>\n  //                     </div>\n  //                 </div>\n  //#endregion\n\n  const Widgets = []\n\n    if (this.state[\"content\"] !== null)\n    {\n      for (let x in parsedData.default.ideas)\n      {\n        for (let y in parsedData.default.ideas[x])\n        { \n          if (parsedData.default.ideas[x][y] === \"Content\") \n          {\n            if(parsedData.default.ideas[x].ideas !== \"undefined\") \n            {\n              for (let z in parsedData.default.ideas[x].ideas) \n              {\n                if (parsedData.default.ideas[x].ideas[z].title === \"Widgets\")\n                {\n                  for (let d in parsedData.default.ideas[x].ideas[z].ideas)\n                  {\n                    var Description = \"\", ButtonText = \"\", Header = parsedData.default.ideas[x].ideas[z].ideas[d].title\n\n                    //Here we search for the attr node to see if there's text\n                    for (let j in parsedData.default.ideas[x].ideas[z].ideas[d]) {\n                      if (j === \"attr\") {\n                        for (let k in parsedData.default.ideas[x].ideas[z].ideas[d][j]) {\n                          for (let l in parsedData.default.ideas[x].ideas[z].ideas[d][j][k]) {\n                            if (l === \"text\") {\n                              Description = parsedData.default.ideas[x].ideas[z].ideas[d][j][k].text;\n                            }\n                          }\n                        }\n                      }\n                    }\n\n                    //Here we search the nodes \"Ideas\" child for the button text\n                    for (let c in parsedData.default.ideas[x].ideas[z].ideas[d].ideas) {\n                         ButtonText = parsedData.default.ideas[x].ideas[z].ideas[d].ideas[c].title;\n                    }\n                    const MessengerVar = ButtonText.toString()\n\n                      Widgets.push(<div className=\"col s12 m4\" key={parsedData.default.ideas[x].ideas[z].ideas[d].id}>\n                                    <div className=\"icon-block center\">\n                                      <button type=\"button\" className=\"btn btn-primary\" data-target=\"theme-modal\" onClick={ () => this.reloadContent(MessengerVar, 'widget')}>{ ButtonText }</button>\n                                      <h4 className=\"center\">{ Header }</h4>\n                                      <p className=\"light center\">{ Description }</p>\n                                    </div>\n                                  </div>)\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n  const Base = <div>\n                 <div className=\"container widgets\">\n                   <div className=\"section\">\n                      <div className=\"row\">\n                        {Widgets}\n                      </div>\n                    </div>\n                 </div>\n                 <div className=\"parallax-container valign-wrapper\" >\n                   {/* {Text} */}\n                 </div>\n               </div>\n\n  if (Content.length === 0) {\n    return Base;\n  }\n  else {\n    return null;\n  }\n}\n\nFooterFunc = () => { \n\n  const children = [] \n  var FooterStyle //= { 'padding-left': '1%', 'padding-right': '1%' }\n  var cardTitle\n  var cardSub \n\n  for (let x in parsedData.default.ideas) {\n    for (let y in parsedData.default.ideas[x])\n    { \n      if (parsedData.default.ideas[x][y] === \"Footer\") \n      {\n        FooterStyle = this.BuildStyleVar(parsedData.default.ideas[x])\n        if(parsedData.default.ideas[x].ideas !== \"undefined\")\n        {\n          for (let z in parsedData.default.ideas[x].ideas)\n          {\n\n            cardTitle = \"\";\n            cardSub = \"\";\n            var type = false;\n            var linkList = []\n\n            for (let r in parsedData.default.ideas[x].ideas[z]) {\n              if (r === \"title\") {\n                cardTitle = parsedData.default.ideas[x].ideas[z][r];\n              }\n              else if (r === \"attr\") {\n                for (let t in parsedData.default.ideas[x].ideas[z][r]) {\n                  for (let u in parsedData.default.ideas[x].ideas[z][r][t]) {\n                    if (u === \"text\") {\n                      cardSub = <p className=\"white-text light\"> { parsedData.default.ideas[x].ideas[z][r][t][u] } </p>\n                    } \n                  }\n                }\n              }\n              else if (r === \"ideas\") {\n                var link = \"\"\n                for (let t in parsedData.default.ideas[x].ideas[z][r]) {\n                  //Check link type here and determine if its a logo or something\n                  link = (this.extractLink(parsedData.default.ideas[x].ideas[z][r][t].title));\n                  \n                  if (this.isImage(link)) { //If it is an image, or more accurately it is a google drive doc\n                    cardSub = <img src={ link.replace(\"open\", \"uc\") } alt=\"img not loaded\"></img>\n                  } \n                  else { //If it is not a google drive link\n                    type = true;\n\n                    const ModalId = '#' + parsedData.default.ideas[x].ideas[z][r][t].id.replace(/\\s/g, '');\n                    \n                    // while (ModalId.indexOf('.') !== 0) {\n                    //   //ModalId = ModalId.replace('.','');\n                    //   alert(ModalId.indexOf('.'))\n                    //   ModalId = ModalId.slice(ModalId.indexOf('.'), ModalId.indexOf('.') + 1);\n                    // }\n\n                    \n\n                    linkList.push(<div>\n                                    <li key={ parsedData.default.ideas[x].ideas[z][r][t].id }>\n                                      <a className=\"white-text light\" href=\"https://#\" onClick={ () => this.toggle(ModalId)}>\n                                        { parsedData.default.ideas[x].ideas[z][r][t].title.split(\"http\")[0] }\n                                      </a>\n                                    </li>\n                                    { this.iFrameModal(\"\", link, ModalId) }\n                                  </div>)\n                  }\n                }\n              }\n            }\n            if (type) {\n              children.push(<div className=\"col l3 s12\" key={ parsedData.default.ideas[x].ideas[z].id + x.toString() }>\n                              <h5 className=\"white-text light\"> { cardTitle } </h5>\n                              <ul>{ linkList }</ul>\n                            </div>)\n            }\n            else {\n            children.push(<div className=\"col l3 s12\" key={ parsedData.default.ideas[x].ideas[z].id + x.toString() }>\n                            <h5 className=\"white-text light\"> { cardTitle } </h5>\n                            { cardSub }\n                          </div>)\n            }\n          }\n        }\n      }\n    }\n  } \n\n  return <footer className=\"page-footer font-small indigo\" style={ FooterStyle }>\n            <div className=\"row\" style={{ marginLeft: \"15px\"}}>\n              {children}\n            </div>\n          </footer> \n}\n\n  render() {\n    var modal = document.getElementById('searchiFrame');\n\n    window.onclick = function(event) {\n        if (event.target === modal) {\n          alert(\"outside click!\")\n            modal.style.display = \"none\";\n        }\n    }\n\n  // Get the modal\n  //  var modal = document.getElementById('searchiFrame');\n  modal = document.getElementById('searchiFrame');\n\n  // When the user clicks anywhere outside of the modal, close it\n    window.onclick = function(event) {\n        if (event.target === modal) {\n            modal.style.display = \"searchiFrame\";\n        }\n\n    }\n\n    return (\n      <div className=\"App\" className={ this.state[\"HideSearchBar\"] ? 'animateReverse' : 'animate' }> \n        {this.SideNavFunc()}\n        {this.HeaderFunc()}\n        {this.ContentFunc(this.state.content)} \n        {this.ContentWidgets(this.state.widgets)}       \n        {this.FooterFunc()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}