{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport './CustomCSS.css';\nimport * as parsedData from './JSON_Dat.json';\nimport SideNav, { NavItem, NavIcon, NavText } from '@trendmicro/react-sidenav';\nimport { Button, Modal as _Modal, ModalBody, ModalHeader, ModalFooter } from 'mdbreact';\nimport '@trendmicro/react-sidenav/dist/react-sidenav.css'; //These imports are killing the modals\n\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.HeaderFunc = function () {\n      var children = [];\n      var HeaderLogo;\n      var base = React.createElement(\"nav\", {\n        class: \"white\",\n        role: \"navigation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"nav-wrapper container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        id: \"logo-container\",\n        href: \"www.google.com\",\n        className: \"brand-logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"\\xA0 SARVA 3.0\"), React.createElement(\"ul\", {\n        class: \"right hide-on-med-and-down\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, children)));\n\n      for (var x in parsedData.default.ideas) {\n        for (var y in parsedData.default.ideas[x]) {\n          if (parsedData.default.ideas[x][y] === \"NavBar\") {\n            var test = _this.BuildStyleVar(parsedData.default.ideas[x]);\n\n            if (parsedData.default.ideas[x].ideas !== \"undefined\") {\n              for (var z in parsedData.default.ideas[x].ideas) {\n                if (parsedData.default.ideas[x].ideas[z].title === \"Menu\") {\n                  for (var ddl in parsedData.default.ideas[x].ideas[z].ideas) {\n                    var innerArray = [];\n\n                    if (parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas !== \"undefined\") {\n                      var _loop = function _loop(inner) {\n                        var ddlStyle = {\n                          fontSize: '12px',\n                          color: 'red',\n                          indent: '50px'\n                        };\n                        var example1 = \"position:absolute;fontSize: 12px; color: red;\";\n                        var example2 = \"-ms-transform: rotate(20deg);-webkit-transform: rotate(20deg);\"; // 2ⁿᵈ step logic\n\n                        var camelize = function camelize(string) {\n                          return string.replace(/-([a-z])/gi, function (s, group) {\n                            return group.toUpperCase();\n                          });\n                        }; // 1ˢᵗ step logic which calls the 2ⁿᵈ step logic\n\n\n                        var style2object = function style2object(style) {\n                          return style.split(';').filter(function (s) {\n                            return s.length;\n                          }).reduce(function (a, b) {\n                            var keyValue = b.split(':');\n                            a[camelize(keyValue[0])] = keyValue[1];\n                            return a;\n                          }, {});\n                        };\n\n                        alert(style2object(test));\n                        innerArray.push(React.createElement(\"li\", {\n                          style: style2object(test),\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 158\n                          },\n                          __self: this\n                        }, React.createElement(\"a\", {\n                          href: \"www.google.com\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 158\n                          },\n                          __self: this\n                        }, parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas[inner].title)));\n                      };\n\n                      for (var inner in parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas) {\n                        _loop(inner);\n                      }\n                    }\n\n                    if (innerArray.length > 0) {\n                      children.push(React.createElement(\"li\", {\n                        class: \"sub-menu-parent\",\n                        \"tab-index\": \"0\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 163\n                        },\n                        __self: this\n                      }, React.createElement(\"a\", {\n                        href: \"www.google.com\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 164\n                        },\n                        __self: this\n                      }, parsedData.default.ideas[x].ideas[z].ideas[ddl].title, \" \\u21D3\"), React.createElement(\"ul\", {\n                        class: \"sub-menu\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 165\n                        },\n                        __self: this\n                      }, innerArray)));\n                    } else {\n                      children.push(React.createElement(\"li\", {\n                        styled: true,\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 171\n                        },\n                        __self: this\n                      }, React.createElement(\"a\", {\n                        href: \"www.google.com\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 171\n                        },\n                        __self: this\n                      }, parsedData.default.ideas[x].ideas[z].ideas[ddl].title)));\n                    }\n                  }\n                } else if (parsedData.default.ideas[x].ideas[z].title === \"Logo\") {\n                  for (var count in parsedData.default.ideas[x].ideas[z].ideas) {\n                    if (_this.isImage(parsedData.default.ideas[x].ideas[z].ideas[count].title)) {\n                      HeaderLogo = _this.googleImage(_this.extractLink(parsedData.default.ideas[x].ideas[z].ideas[count].title));\n                    }\n                  }\n\n                  children.push(React.createElement(\"img\", {\n                    id: \"menu-logo\",\n                    alt: \"img not loaded\",\n                    src: HeaderLogo,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 181\n                    },\n                    __self: this\n                  }));\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return base;\n    };\n\n    _this.SideNavFunc = function () {\n      var InnerDdl = [],\n          Items = [];\n      var Glyhicon = \"fa fa-fw fa-home\";\n      var Base = React.createElement(SideNav, {\n        componentClass: \"sideNav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(SideNav.Toggle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), React.createElement(SideNav.Nav, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, Items));\n\n      for (var o in parsedData.default.ideas) {\n        for (var u in parsedData.default.ideas[o]) {\n          if (parsedData.default.ideas[o][u] === \"SideNav\") {\n            if (parsedData.default.ideas[o].ideas !== \"undefined\") {\n              for (var i in parsedData.default.ideas[o].ideas) {\n                //Rember to check if you need to initialize anything\n                //Here check for a glyphicon, using home for now\n                if (parsedData.default.ideas[o].ideas[i].ideas !== \"undefined\") {\n                  InnerDdl = [];\n\n                  var _loop2 = function _loop2(w) {\n                    //Check what type it is, if its a modal, new tab, replace content and breadcrumb\n                    //If Modal\n                    var ModalId = '#' + parsedData.default.ideas[o].ideas[i].ideas[w].title.replace(/\\s/g, '');\n                    modalText = \"\";\n\n                    if (parsedData.default.ideas[o].ideas[i].ideas[w].attr !== \"undefined\") {\n                      for (var r in parsedData.default.ideas[o].ideas[i].ideas[w]) {\n                        for (var p in parsedData.default.ideas[o].ideas[i].ideas[w][r]) {\n                          for (var text in parsedData.default.ideas[o].ideas[i].ideas[w][r][p]) {\n                            if (text === \"text\") {\n                              modalText = parsedData.default.ideas[o].ideas[i].ideas[w][r][p][text];\n                            }\n                          }\n                        }\n                      }\n                    }\n\n                    InnerDdl.push(React.createElement(NavItem, {\n                      eventKey: parsedData.default.ideas[o].ideas[i].ideas[w].id,\n                      onClick: function onClick() {\n                        return _this.toggle(ModalId);\n                      },\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 236\n                      },\n                      __self: this\n                    }, React.createElement(NavText, {\n                      style: {\n                        color: 'black !important'\n                      },\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 237\n                      },\n                      __self: this\n                    }, React.createElement(\"a\", {\n                      type: \"button\",\n                      href: \"/#\",\n                      class: \"black-text\",\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 238\n                      },\n                      __self: this\n                    }, parsedData.default.ideas[o].ideas[i].ideas[w].title), _this.Modal(parsedData.default.ideas[o].ideas[i].ideas[w].title, modalText, parsedData.default.ideas[o].ideas[i].ideas[w].title.replace(/\\s/g, ''))))); ///////////////////////////////////////////////////\n                    //If new tab link  \n                    // InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} >\n                    //                 <NavText style={{color: 'black !important'}}>\n                    //                 <a href=\"http://google.com\" rel=\"noopener nereferrer\" class=\"black-text\" target='_blank'>{parsedData.default.ideas[o].ideas[i].ideas[w].title}</a>\n                    //                 </NavText>\n                    //               </NavItem>)\n                    ///////////////////////////////////////////////////\n                    //If content reload with new breadcrumb\n                    //InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} onClick= {() => this.reloadContent(parsedData.default.ideas[o].ideas[i].ideas[w].title)}>\n                    //                 <NavText style={{color: 'black !important'}}>\n                    //                 {parsedData.default.ideas[o].ideas[i].ideas[w].title}\n                    //                 </NavText>\n                    //               </NavItem>)\n                    ///////////////////////////////////////////////////\n                    // InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} onClick= {() => popModal(parsedData.default.ideas[o].ideas[i].ideas[w].title, \"\")}>>\n                    //                 <NavText style={{color: 'black !important'}}>\n                    //                   {parsedData.default.ideas[o].ideas[i].ideas[w].title}\n                    //                 </NavText>\n                    //                 <dialog id=\"myDialog\">This is a dialog window</dialog>\n                    //               </NavItem>)\n                  };\n\n                  for (var w in parsedData.default.ideas[o].ideas[i].ideas) {\n                    var modalText;\n\n                    _loop2(w);\n                  } /////////////////////////////////////////\n\n\n                  Items.push(React.createElement(NavItem, {\n                    eventKey: parsedData.default.ideas[o].ideas[i].id,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 275\n                    },\n                    __self: this\n                  }, React.createElement(NavIcon, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 276\n                    },\n                    __self: this\n                  }, React.createElement(\"i\", {\n                    className: Glyhicon,\n                    style: {\n                      fontSize: '1.75em',\n                      color: '#fff'\n                    },\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 277\n                    },\n                    __self: this\n                  })), React.createElement(NavText, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 279\n                    },\n                    __self: this\n                  }, parsedData.default.ideas[o].ideas[i].title, \" \"), InnerDdl));\n                } else {\n                  Items.push(React.createElement(NavItem, {\n                    eventKey: parsedData.default.ideas[o].ideas[i].id,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 284\n                    },\n                    __self: this\n                  }, React.createElement(NavIcon, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 285\n                    },\n                    __self: this\n                  }, React.createElement(\"i\", {\n                    className: Glyhicon,\n                    style: {\n                      fontSize: '1.75em'\n                    },\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 286\n                    },\n                    __self: this\n                  })), React.createElement(NavText, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 288\n                    },\n                    __self: this\n                  }, \" \", parsedData.default.ideas[o][u].ideas[i].title, \" \")));\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return Base;\n    };\n\n    _this.ContentFunc = function (Page) {\n      //Make use of page var to reload page content\n      //So in here we will receive a node title, check the \"Content\" branch and iterate through its data where the node matches the Title\n      var DynamicContent = [];\n\n      if (Page !== \"\") {\n        if (_this.state[\"content\"] !== null) {\n          for (var x in parsedData.default.ideas) {\n            for (var y in parsedData.default.ideas[x]) {\n              if (parsedData.default.ideas[x][y] === \"Content\") {\n                if (parsedData.default.ideas[x].ideas !== \"undefined\") {\n                  for (var z in parsedData.default.ideas[x].ideas) {\n                    // Initialize your vairables\n                    var Heading = \"\",\n                        Subtext = \"\",\n                        ButtonText = \"\";\n\n                    for (var r in parsedData.default.ideas[x].ideas[z]) {\n                      // Get the header for this section's content\n                      if (r === \"title\") {\n                        Heading = parsedData.default.ideas[x].ideas[z][r];\n                      } // Get the actual content for the section\n\n\n                      if (r === \"attr\") {\n                        for (var w in parsedData.default.ideas[x].ideas[z][r]) {\n                          for (var g in parsedData.default.ideas[x].ideas[z][r][w]) {\n                            if (g === \"text\") {\n                              Subtext = React.createElement(\"div\", {\n                                class: \"row center\",\n                                __source: {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 328\n                                },\n                                __self: this\n                              }, React.createElement(\"h5\", {\n                                class: \"header col s12 text-darken-4\",\n                                __source: {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 329\n                                },\n                                __self: this\n                              }, parsedData.default.ideas[x].ideas[z][r][w][g]));\n                            }\n                          }\n                        }\n                      } //Check the \"Ideas\" for buttons\n\n\n                      for (var j in parsedData.default.ideas[x].ideas[z].ideas) {\n                        for (var k in parsedData.default.ideas[x].ideas[z].ideas[j]) {\n                          if (k === \"title\") {\n                            ButtonText = parsedData.default.ideas[x].ideas[z].ideas[j][k];\n                          }\n                        }\n                      }\n                    }\n\n                    if (Heading !== \"Widgets\") {\n                      if (ButtonText.length === 0) {\n                        DynamicContent.push(React.createElement(\"div\", {\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 349\n                          },\n                          __self: this\n                        }, React.createElement(\"h2\", {\n                          class: \"header center text-darken-4\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 349\n                          },\n                          __self: this\n                        }, Heading), Subtext));\n                      } else if (ButtonText.length > 0) {\n                        DynamicContent.push(React.createElement(\"div\", {\n                          class: \"parallax-container valign-wrapper\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 352\n                          },\n                          __self: this\n                        }, React.createElement(\"div\", {\n                          class: \"section no-pad-bot\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 353\n                          },\n                          __self: this\n                        }, React.createElement(\"div\", {\n                          class: \"container\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 354\n                          },\n                          __self: this\n                        }, React.createElement(\"div\", {\n                          class: \"row center\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 355\n                          },\n                          __self: this\n                        }, React.createElement(\"h2\", {\n                          class: \"header center brown-text text-darken-3\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 356\n                          },\n                          __self: this\n                        }, Heading), React.createElement(\"h5\", {\n                          class: \"header col s12 brown-text text-darken-3\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 357\n                          },\n                          __self: this\n                        }, Subtext)), React.createElement(\"div\", {\n                          class: \"row center\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 359\n                          },\n                          __self: this\n                        }, React.createElement(\"a\", {\n                          href: \"#data-modal\",\n                          id: \"download-button\",\n                          type: \"button\",\n                          class: \"btn btn-primary\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 360\n                          },\n                          __self: this\n                        }, ButtonText)), React.createElement(\"br\", {\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 362\n                          },\n                          __self: this\n                        })))));\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      var Base = React.createElement(\"div\", {\n        id: \"index-banner\",\n        class: \"parallax-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"section no-pad-bot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }), DynamicContent)));\n      return Base;\n    };\n\n    _this.ContentWidgets = function () {\n      //#region Static Widgets\n      // const Widgets = <div class=\"section\">\n      //                   <div class=\"row\">\n      //                     <div class=\"col s12 m4\">\n      //                       <div class=\"icon-block center\">\n      //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"search-modal\" onClick={ () => this.reloadContent('Search')}>Search</button>   \n      //                         <h5 class=\"center\">Search and Discover Resources</h5>\n      //                         <p class=\"light center\">Use simple or advanced tools to search for data meeting your criteria.</p>\n      //                       </div>\n      //                     </div>\n      //                     <div class=\"col s12 m4\">\n      //                       <div class=\"icon-block center\">\n      //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"theme-modal\" onClick={ () => this.reloadContent('Themes')}>Themes</button>            \n      //                         <h5 class=\"center\">Explore Available Resources by Sector or Theme</h5>\n      //                         <p class=\"light center\">Browse, preview, and access data and narratives in popular collections and in common themes.</p>\n      //                       </div>\n      //                     </div>\n      //                     <div class=\"col s12 m4\">\n      //                       <div class=\"icon-block center\">\n      //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"contr-modal\">Contribute</button>  \n      //                         <h5 class=\"center\">Tell Us About Your Area of Interest</h5>\n      //                         <p class=\"light center\"><a href=\"www.google.com\">Register</a> as a user and contribute data, assessments, and media.</p>\n      //                       </div>\n      //                     </div>\n      //                     </div>\n      //                 </div>\n      //#endregion\n      var Widgets = [];\n\n      if (_this.state[\"content\"] !== null) {\n        for (var x in parsedData.default.ideas) {\n          for (var y in parsedData.default.ideas[x]) {\n            if (parsedData.default.ideas[x][y] === \"Content\") {\n              if (parsedData.default.ideas[x].ideas !== \"undefined\") {\n                for (var z in parsedData.default.ideas[x].ideas) {\n                  if (parsedData.default.ideas[x].ideas[z].title === \"Widgets\") {\n                    var _loop3 = function _loop3(d) {\n                      Description = \"\";\n                      ButtonText = \"\";\n                      Header = parsedData.default.ideas[x].ideas[z].ideas[d].title; //Here we search for the attr node to see if there's text\n\n                      for (var j in parsedData.default.ideas[x].ideas[z].ideas[d]) {\n                        if (j === \"attr\") {\n                          for (var k in parsedData.default.ideas[x].ideas[z].ideas[d][j]) {\n                            for (var l in parsedData.default.ideas[x].ideas[z].ideas[d][j][k]) {\n                              if (l === \"text\") {\n                                Description = parsedData.default.ideas[x].ideas[z].ideas[d][j][k].text;\n                              }\n                            }\n                          }\n                        }\n                      } //Here we search the nodes \"Ideas\" child for the button text\n\n\n                      for (var c in parsedData.default.ideas[x].ideas[z].ideas[d].ideas) {\n                        ButtonText = parsedData.default.ideas[x].ideas[z].ideas[d].ideas[c].title;\n                      }\n\n                      var MessengerVar = ButtonText.toString();\n                      Widgets.push(React.createElement(\"div\", {\n                        class: \"col s12 m4\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 461\n                        },\n                        __self: this\n                      }, React.createElement(\"div\", {\n                        class: \"icon-block center\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 462\n                        },\n                        __self: this\n                      }, React.createElement(\"button\", {\n                        type: \"button\",\n                        class: \"btn btn-primary\",\n                        \"data-target\": \"theme-modal\",\n                        onClick: function onClick() {\n                          return _this.reloadContent(MessengerVar);\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 463\n                        },\n                        __self: this\n                      }, ButtonText), React.createElement(\"h4\", {\n                        class: \"center\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 464\n                        },\n                        __self: this\n                      }, Header), React.createElement(\"p\", {\n                        class: \"light center\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 465\n                        },\n                        __self: this\n                      }, Description))));\n                    };\n\n                    for (var d in parsedData.default.ideas[x].ideas[z].ideas) {\n                      var Description, ButtonText, Header;\n\n                      _loop3(d);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } // const Text = <div class=\"section no-pad-bot\">\n      //                 <div class=\"container\">\n      //                   <div class=\"row center\">\n      //                     <h2 class=\"header center brown-text text-darken-3\">Distributed, High Resolution Data</h2>\n      //                     <h5 class=\"header col s12 brown-text text-darken-3\">Distributed, high-resolution data can be annotated and linked from any standardised service in the web and included into our profiling and impact assessment tools. Very large datasets can be accommodated without deterioration in service - thanks to an innovative distributed data processing breakthrough.</h5>      \n      //                   </div>\n      //                   <div class=\"row center\">\n      //                     <a href=\"#data-modal\" id=\"download-button\" type=\"button\" class=\"btn btn-primary\">Read More</a>\n      //                   </div>\n      //                   <br></br>\n      //                 </div>\n      //               </div>  \n      //const Background = <img id=\"img2\" src=\"background_image_4.png\" alt=\"Unsplashed background img 2\" ></img>\n\n\n      var Base = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"container widgets\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        },\n        __self: this\n      }, Widgets))), React.createElement(\"div\", {\n        class: \"parallax-container valign-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501\n        },\n        __self: this\n      }));\n      return Base;\n    };\n\n    _this.FooterFunc = function () {\n      var children = [];\n      var FooterStyle = {\n        'padding-left': '1%',\n        'padding-right': '1%'\n      };\n      var base = React.createElement(\"footer\", {\n        class: \"page-footer font-small indigo\",\n        style: FooterStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513\n        },\n        __self: this\n      }, children));\n      var cardTitle;\n      var cardSub;\n\n      for (var x in parsedData.default.ideas) {\n        for (var y in parsedData.default.ideas[x]) {\n          if (parsedData.default.ideas[x][y] === \"Footer\") {\n            if (parsedData.default.ideas[x].ideas !== \"undefined\") {\n              for (var z in parsedData.default.ideas[x].ideas) {\n                cardTitle = \"\";\n                cardSub = \"\";\n                var type = false;\n                var linkList = [];\n\n                for (var r in parsedData.default.ideas[x].ideas[z]) {\n                  if (r === \"title\") {\n                    cardTitle = parsedData.default.ideas[x].ideas[z][r];\n                  } else if (r === \"attr\") {\n                    for (var t in parsedData.default.ideas[x].ideas[z][r]) {\n                      for (var u in parsedData.default.ideas[x].ideas[z][r][t]) {\n                        if (u === \"text\") {\n                          cardSub = React.createElement(\"p\", {\n                            class: \"white-text light\",\n                            __source: {\n                              fileName: _jsxFileName,\n                              lineNumber: 545\n                            },\n                            __self: this\n                          }, \" \", parsedData.default.ideas[x].ideas[z][r][t][u], \" \");\n                        }\n                      }\n                    }\n                  } else if (r === \"ideas\") {\n                    for (var _t in parsedData.default.ideas[x].ideas[z][r]) {\n                      //Check link type here and determine if its a logo or something\n                      var link = _this.extractLink(parsedData.default.ideas[x].ideas[z][r][_t].title);\n\n                      if (_this.isImage(link)) {\n                        //It is an image, or more accurately it is a google drive doc\n                        cardSub = React.createElement(\"img\", {\n                          src: link.replace(\"open\", \"uc\"),\n                          alt: \"img not loaded\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 558\n                          },\n                          __self: this\n                        });\n                      } else {\n                        //it is not a google drive link\n                        type = true;\n                        linkList.push(React.createElement(\"li\", {\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 562\n                          },\n                          __self: this\n                        }, React.createElement(\"a\", {\n                          class: \"white-text light\",\n                          href: link,\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 562\n                          },\n                          __self: this\n                        }, parsedData.default.ideas[x].ideas[z][r][_t].title.split(\"http\")[0])));\n                      }\n                    }\n                  }\n                }\n\n                if (type) {\n                  children.push(React.createElement(\"div\", {\n                    class: \"col l3 s12\",\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 568\n                    },\n                    __self: this\n                  }, React.createElement(\"h5\", {\n                    class: \"white-text light\",\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 569\n                    },\n                    __self: this\n                  }, \" \", cardTitle, \" \"), React.createElement(\"ul\", {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 570\n                    },\n                    __self: this\n                  }, linkList)));\n                } else {\n                  children.push(React.createElement(\"div\", {\n                    class: \"col l3 s12\",\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 574\n                    },\n                    __self: this\n                  }, React.createElement(\"h5\", {\n                    class: \"white-text light\",\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 575\n                    },\n                    __self: this\n                  }, \" \", cardTitle, \" \"), cardSub));\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return base;\n    };\n\n    _this.state = {\n      content: \"\",\n      ReadingRisk: false,\n      ContentHeading: \"\",\n      ContentBody: \"\"\n    };\n    _this.reloadContent = _this.reloadContent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.SideNavFunc = _this.SideNavFunc.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.Modal = _this.Modal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.BuildStyleVar = _this.BuildStyleVar.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //#region Helpers \n\n\n  _createClass(App, [{\n    key: \"toggle\",\n    value: function toggle(modal) {\n      var modalNumber = modal.replace(\"#\", \"\");\n      this.setState(_defineProperty({}, modalNumber, !this.state[modalNumber]));\n    }\n  }, {\n    key: \"reloadContent\",\n    value: function reloadContent(path) {\n      //See if we are going to search the tree or if we will receive the content somehow else \n      this.setState({\n        content: path\n      });\n    }\n  }, {\n    key: \"extractLink\",\n    value: function extractLink(str) {\n      var link;\n\n      if (str.indexOf(\"http\") > -1) {\n        link = str.split('http')[1];\n      } else {\n        link = \"\";\n      }\n\n      return \"http\" + link;\n    }\n  }, {\n    key: \"isImage\",\n    value: function isImage(str) {\n      if (str.toString().includes(\"drive.google\")) //Check if it is an image\n        {\n          return true;\n        }\n\n      return false;\n    }\n  }, {\n    key: \"googleImage\",\n    value: function googleImage(link) {\n      return link.replace(\"open\", \"uc\");\n    }\n  }, {\n    key: \"Modal\",\n    value: function Modal(header, innerText, id) {\n      var _this2 = this;\n\n      var CustomModal = function CustomModal() {\n        return React.createElement(_Modal, {\n          isOpen: _this2.state[id],\n          toggle: function toggle() {\n            return _this2.toggle(id);\n          },\n          size: \"fluid\",\n          background: \"grey\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, React.createElement(ModalHeader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, header), React.createElement(ModalBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"text-black modal-innet-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, innerText)), React.createElement(ModalFooter, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, React.createElement(Button, {\n          color: \"secondary\",\n          onClick: function onClick() {\n            return _this2.toggle(id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, \"Close\"), ' '));\n      };\n\n      return ReactDOM.createPortal(React.createElement(CustomModal, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), document.getElementById('root'));\n    }\n  }, {\n    key: \"BuildStyleVar\",\n    value: function BuildStyleVar(NodePath) {\n      // Here we are going to get the path to the node (will prob be a attr node) containing the styles \n      // for the tag/content and process it. Will return a var with all the style's structured and correct\n      var Style = \"\"; //\"{\"\n\n      for (var t in NodePath) {\n        if (t === \"attr\") {\n          for (var y in NodePath[t]) {\n            if (y === \"style\") {\n              for (var u in NodePath[t][y]) {\n                Style += u.toString() + \": '\" + NodePath[t][y][u].toString() + \"', \";\n              }\n            }\n          }\n        }\n      }\n\n      Style = Style.toString().substr(0, Style.toString().length - 2); //+ \"};\";\n      // return <Style/>;\n\n      return Style;\n    } //#endregion\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        class: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590\n        },\n        __self: this\n      }, this.SideNavFunc(), this.HeaderFunc(), this.ContentFunc(this.state.content), this.ContentWidgets(), this.FooterFunc());\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\LanceM\\Documents\\Javascript\\SAEON_Work\\client\\src\\App.js"],"names":["React","Component","ReactDOM","parsedData","SideNav","NavItem","NavIcon","NavText","Button","Modal","ModalBody","ModalHeader","ModalFooter","App","props","HeaderFunc","children","HeaderLogo","base","x","default","ideas","y","test","BuildStyleVar","z","title","ddl","innerArray","inner","ddlStyle","fontSize","color","indent","example1","example2","camelize","string","replace","s","group","toUpperCase","style2object","style","split","filter","length","reduce","a","b","keyValue","alert","push","count","isImage","googleImage","extractLink","SideNavFunc","InnerDdl","Items","Glyhicon","Base","o","u","i","w","ModalId","modalText","attr","r","p","text","id","toggle","ContentFunc","Page","DynamicContent","state","Heading","Subtext","ButtonText","g","j","k","ContentWidgets","Widgets","d","Description","Header","l","c","MessengerVar","toString","reloadContent","FooterFunc","FooterStyle","cardTitle","cardSub","type","linkList","t","link","content","ReadingRisk","ContentHeading","ContentBody","bind","modal","modalNumber","setState","path","str","indexOf","includes","header","innerText","CustomModal","createPortal","document","getElementById","NodePath","Style","substr"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport './CustomCSS.css'; \nimport * as parsedData from './JSON_Dat.json';\nimport SideNav, { NavItem, NavIcon, NavText } from '@trendmicro/react-sidenav';\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from 'mdbreact';\nimport '@trendmicro/react-sidenav/dist/react-sidenav.css';\n\n//These imports are killing the modals\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nclass App extends Component { \n\nconstructor(props) {\n  super(props);\n  this.state = {content: \"\", ReadingRisk: false, ContentHeading: \"\", ContentBody: \"\"};\n  this.reloadContent = this.reloadContent.bind(this)\n  this.SideNavFunc = this.SideNavFunc.bind(this)\n  this.Modal = this.Modal.bind(this)\n  this.BuildStyleVar = this.BuildStyleVar.bind(this)\n  this.toggle = this.toggle.bind(this)\n} \n\n//#region Helpers \n \ntoggle(modal) {\n  let modalNumber = modal.replace(\"#\",\"\")\n  this.setState({\n    [modalNumber]: !this.state[modalNumber]\n  });\n}\n\nreloadContent(path) {\n  //See if we are going to search the tree or if we will receive the content somehow else \n  this.setState({content : path})\n}\n\nextractLink(str) {\n  var link;\n\n  if (str.indexOf(\"http\") > -1) {\n      link = str.split('http')[1];\n  }\n  else {\n      link = \"\";\n  }\n\n  return \"http\" + link;\n}\n\nisImage(str) {\n  if (str.toString().includes(\"drive.google\")) //Check if it is an image\n  {\n    return true;\n  }\n\n  return false;\n}\n\ngoogleImage(link){\n  return link.replace(\"open\", \"uc\");\n} \n \nModal(header, innerText, id) {\n  \n    const CustomModal = () => \n    (<Modal isOpen={this.state[id]} toggle={() => this.toggle(id)} size=\"fluid\" background=\"grey\">\n      <ModalHeader>{header}</ModalHeader>\n      <ModalBody>\n        <div className=\"text-black modal-innet-text\">{innerText}</div>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={() => this.toggle(id)}>Close</Button>{' '}\n      </ModalFooter>\n     </Modal>); \n\n  return ReactDOM.createPortal( <CustomModal/>, document.getElementById('root'));\n}\n\nBuildStyleVar(NodePath){\n  // Here we are going to get the path to the node (will prob be a attr node) containing the styles \n  // for the tag/content and process it. Will return a var with all the style's structured and correct\n\n  var Style = \"\"//\"{\"\n \n  for (let t in NodePath) {\n    if (t === \"attr\"){\n      for (let y in NodePath[t]) {\n        if (y === \"style\") {\n          for (let u in NodePath[t][y]) {\n            Style += (u.toString() + \": '\" + NodePath[t][y][u].toString() + \"', \");\n          }\n        }\n      }\n    }\n  }\n\n  Style = Style.toString().substr(0, (Style.toString().length - 2)) ;//+ \"};\";\n   \n  // return <Style/>;\n  return Style;\n}\n\n//#endregion\n\nHeaderFunc = () => {\n\n  const children = []\n  var HeaderLogo \n  const base = (<nav class=\"white\" role=\"navigation\">\n                  <div class=\"nav-wrapper container\">\n                    <a id=\"logo-container\" href=\"www.google.com\" className=\"brand-logo\">&nbsp; SARVA 3.0</a>\n                    <ul class=\"right hide-on-med-and-down\">\n                      {children}\n                    </ul>\n                  </div>\n                </nav>)\n\n  for (let x in parsedData.default.ideas){\n    for (let y in parsedData.default.ideas[x])\n    { \n      if (parsedData.default.ideas[x][y] === \"NavBar\") \n      {\n        var test = this.BuildStyleVar(parsedData.default.ideas[x]);\n        if(parsedData.default.ideas[x].ideas !== \"undefined\"){\n          for (let z in parsedData.default.ideas[x].ideas){\n            if (parsedData.default.ideas[x].ideas[z].title === \"Menu\"){\n              for (let ddl in parsedData.default.ideas[x].ideas[z].ideas){\n                const innerArray = []\n                if (parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas !== \"undefined\")\n                {\n                  for (let inner in parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas)\n                  {\n                    const ddlStyle = { \n                                        fontSize: '12px',\n                                        color: 'red',\n                                        indent: '50px'\n                                     }; \n    const example1= \"position:absolute;fontSize: 12px; color: red;\"\n    const example2 = \"-ms-transform: rotate(20deg);-webkit-transform: rotate(20deg);\";\n    // 2ⁿᵈ step logic\n    const camelize = (string) =>  string.replace(/-([a-z])/gi,(s, group) =>  group.toUpperCase());\n    \n    // 1ˢᵗ step logic which calls the 2ⁿᵈ step logic\n    const style2object = (style) => style.split(';').filter(s => s.length)\n            .reduce((a, b) => {\n              const keyValue = b.split(':');\n              a[camelize(keyValue[0])] = keyValue[1] ; \n              return a;\n            } ,{});\n                                     \n\n                    \nalert(style2object(test))\n                     innerArray.push(<li style={style2object(test)}><a href=\"www.google.com\" >{parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas[inner].title}</a></li>)\n                  }\n                }\n                if (innerArray.length > 0)  \n                {\n                  children.push(<li class=\"sub-menu-parent\" tab-index=\"0\">\n                                  <a href=\"www.google.com\">{parsedData.default.ideas[x].ideas[z].ideas[ddl].title} &#8659;</a>\n                                  <ul class=\"sub-menu\">\n                                    {innerArray}\n                                  </ul>\n                                </li>)\n                }\n                else {\n                  children.push(<li styled><a href=\"www.google.com\">{parsedData.default.ideas[x].ideas[z].ideas[ddl].title}</a></li>)\n                }\n              }\n            }\n            else if (parsedData.default.ideas[x].ideas[z].title === \"Logo\"){\n              for (let count in parsedData.default.ideas[x].ideas[z].ideas) {\n                if (this.isImage(parsedData.default.ideas[x].ideas[z].ideas[count].title)){\n                  HeaderLogo = this.googleImage(this.extractLink(parsedData.default.ideas[x].ideas[z].ideas[count].title))\n                }\n              }\n              children.push(<img id=\"menu-logo\" alt=\"img not loaded\" src={HeaderLogo}></img> )\n            }\n          } \n        }\n      }\n    }\n  }\n  return base \n}\n\nSideNavFunc = () => {\n\nvar InnerDdl = [], Items = [];\nvar Glyhicon = \"fa fa-fw fa-home\"\n\nconst Base = <SideNav componentClass=\"sideNav\"><SideNav.Toggle /><SideNav.Nav>{ Items }</SideNav.Nav></SideNav>\n\nfor (let o in parsedData.default.ideas)\n{\n  for (let u in parsedData.default.ideas[o])\n  {\n    if (parsedData.default.ideas[o][u] === \"SideNav\") \n    {\n      if(parsedData.default.ideas[o].ideas !== \"undefined\")\n      {\n        for (let i in parsedData.default.ideas[o].ideas)\n        {\n          //Rember to check if you need to initialize anything\n\n          //Here check for a glyphicon, using home for now\n\n          if (parsedData.default.ideas[o].ideas[i].ideas !== \"undefined\")\n          {\n            InnerDdl = []\n            for (let w in parsedData.default.ideas[o].ideas[i].ideas)\n            {\n              //Check what type it is, if its a modal, new tab, replace content and breadcrumb\n\n              //If Modal\n              const ModalId = '#' + parsedData.default.ideas[o].ideas[i].ideas[w].title.replace(/\\s/g, '');\n              var modalText = \"\";\n\n              if (parsedData.default.ideas[o].ideas[i].ideas[w].attr !== \"undefined\")\n              {\n                for (let r in parsedData.default.ideas[o].ideas[i].ideas[w]){\n                  for ( let p in parsedData.default.ideas[o].ideas[i].ideas[w][r]){\n                    for (let text in parsedData.default.ideas[o].ideas[i].ideas[w][r][p]){\n                      if (text === \"text\"){\n                        modalText = parsedData.default.ideas[o].ideas[i].ideas[w][r][p][text];\n                      } \n                    }\n                  }\n                }\n              }\n\n              InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} onClick={() => this.toggle(ModalId)}>\n                              <NavText style={{color: 'black !important'}}>\n                                <a type=\"button\" href=\"/#\" class=\"black-text\">{parsedData.default.ideas[o].ideas[i].ideas[w].title}</a>\n                                {this.Modal(parsedData.default.ideas[o].ideas[i].ideas[w].title, modalText, parsedData.default.ideas[o].ideas[i].ideas[w].title.replace(/\\s/g, ''))}\n                              </NavText>\n                            </NavItem>)\n \n              ///////////////////////////////////////////////////\n\n              //If new tab link  \n\n              // InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} >\n              //                 <NavText style={{color: 'black !important'}}>\n              //                 <a href=\"http://google.com\" rel=\"noopener nereferrer\" class=\"black-text\" target='_blank'>{parsedData.default.ideas[o].ideas[i].ideas[w].title}</a>\n              //                 </NavText>\n              //               </NavItem>)\n            \n              ///////////////////////////////////////////////////\n\n              //If content reload with new breadcrumb\n              \n              //InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} onClick= {() => this.reloadContent(parsedData.default.ideas[o].ideas[i].ideas[w].title)}>\n              //                 <NavText style={{color: 'black !important'}}>\n              //                 {parsedData.default.ideas[o].ideas[i].ideas[w].title}\n              //                 </NavText>\n              //               </NavItem>)\n\n              ///////////////////////////////////////////////////\n\n              // InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} onClick= {() => popModal(parsedData.default.ideas[o].ideas[i].ideas[w].title, \"\")}>>\n              //                 <NavText style={{color: 'black !important'}}>\n              //                   {parsedData.default.ideas[o].ideas[i].ideas[w].title}\n              //                 </NavText>\n              //                 <dialog id=\"myDialog\">This is a dialog window</dialog>\n              //               </NavItem>)\n            }\n\n            /////////////////////////////////////////\n\n            Items.push(<NavItem eventKey={ parsedData.default.ideas[o].ideas[i].id }>\n                        <NavIcon>\n                          <i className={Glyhicon} style={{ fontSize: '1.75em', color: '#fff' }} />\n                        </NavIcon>\n                        <NavText>{ parsedData.default.ideas[o].ideas[i].title } </NavText>\n                        {InnerDdl}\n                      </NavItem>) \n          }\n          else{ \n            Items.push(<NavItem eventKey={ parsedData.default.ideas[o].ideas[i].id }>\n                        <NavIcon>\n                          <i className={Glyhicon} style={{ fontSize: '1.75em' }} />\n                        </NavIcon>\n                        <NavText> {parsedData.default.ideas[o][u].ideas[i].title} </NavText>\n                      </NavItem>)\n          }\n        }\n      }\n    }\n  }\n}\n\n\nreturn (Base)\n}\n\nContentFunc = (Page) => {\n  //Make use of page var to reload page content\n  //So in here we will receive a node title, check the \"Content\" branch and iterate through its data where the node matches the Title\n  \n  var DynamicContent = []\n\n  if (Page !== \"\") {\n    if (this.state[\"content\"] !== null) {\n      for (let x in parsedData.default.ideas) {\n        for (let y in parsedData.default.ideas[x]) { \n          if (parsedData.default.ideas[x][y] === \"Content\") {\n            if(parsedData.default.ideas[x].ideas !== \"undefined\") {\n              for (let z in parsedData.default.ideas[x].ideas) {\n                // Initialize your vairables\n                var Heading = \"\", Subtext = \"\", ButtonText = \"\"\n                \n                for (let r in parsedData.default.ideas[x].ideas[z]) {\n                  // Get the header for this section's content\n                  if (r === \"title\") {\n                    Heading = parsedData.default.ideas[x].ideas[z][r]\n                  }\n                  \n                  // Get the actual content for the section\n                  if (r === \"attr\") {\n                    for (let w in parsedData.default.ideas[x].ideas[z][r]) {\n                      for (let g in parsedData.default.ideas[x].ideas[z][r][w]) {\n                        if (g === \"text\") {\n                          Subtext = <div class=\"row center\">\n                                      <h5 class=\"header col s12 text-darken-4\">{ parsedData.default.ideas[x].ideas[z][r][w][g] }</h5>\n                                    </div>\n                        }\n                      }\n                    }\n                  }\n\n                  //Check the \"Ideas\" for buttons\n                  for (let j in parsedData.default.ideas[x].ideas[z].ideas) {\n                    for (let k in parsedData.default.ideas[x].ideas[z].ideas[j]) {\n                      if (k === \"title\") {\n                        ButtonText = parsedData.default.ideas[x].ideas[z].ideas[j][k]\n                      }\n                    }\n                  }\n\n                }\n\n                if (Heading !== \"Widgets\" ){\n                  if (ButtonText.length === 0) {\n                    DynamicContent.push(<div><h2 class=\"header center text-darken-4\">{ Heading }</h2>{Subtext}</div>)\n                  }\n                  else if (ButtonText.length > 0) {\n                    DynamicContent.push(<div class=\"parallax-container valign-wrapper\">\n                                          <div class=\"section no-pad-bot\">\n                                            <div class=\"container\">\n                                              <div class=\"row center\">\n                                                <h2 class=\"header center brown-text text-darken-3\">{ Heading }</h2>\n                                                <h5 class=\"header col s12 brown-text text-darken-3\">{ Subtext }</h5>\n                                              </div>\n                                              <div class=\"row center\">\n                                                <a href=\"#data-modal\" id=\"download-button\" type=\"button\" class=\"btn btn-primary\">{ ButtonText }</a>\n                                              </div>\n                                              <br/>\n                                            </div>\n                                          </div>\n                                        </div>); \n                  }\n                }\n\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  var Base = <div id=\"index-banner\" class=\"parallax-container\" >\n                  <div class=\"section no-pad-bot\">\n                    <div class=\"container\">\n                      <br></br>\n                      <br></br> \n                      { DynamicContent }\n                    </div>\n                  </div> \n                </div>\n\n  return Base\n}\n\nContentWidgets = () => {\n\n  //#region Static Widgets\n  // const Widgets = <div class=\"section\">\n  //                   <div class=\"row\">\n  //                     <div class=\"col s12 m4\">\n  //                       <div class=\"icon-block center\">\n  //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"search-modal\" onClick={ () => this.reloadContent('Search')}>Search</button>   \n  //                         <h5 class=\"center\">Search and Discover Resources</h5>\n  //                         <p class=\"light center\">Use simple or advanced tools to search for data meeting your criteria.</p>\n  //                       </div>\n  //                     </div>\n\n  //                     <div class=\"col s12 m4\">\n  //                       <div class=\"icon-block center\">\n  //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"theme-modal\" onClick={ () => this.reloadContent('Themes')}>Themes</button>            \n  //                         <h5 class=\"center\">Explore Available Resources by Sector or Theme</h5>\n  //                         <p class=\"light center\">Browse, preview, and access data and narratives in popular collections and in common themes.</p>\n  //                       </div>\n  //                     </div>\n\n  //                     <div class=\"col s12 m4\">\n  //                       <div class=\"icon-block center\">\n  //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"contr-modal\">Contribute</button>  \n  //                         <h5 class=\"center\">Tell Us About Your Area of Interest</h5>\n  //                         <p class=\"light center\"><a href=\"www.google.com\">Register</a> as a user and contribute data, assessments, and media.</p>\n  //                       </div>\n  //                     </div>\n  //                     </div>\n  //                 </div>\n  //#endregion\n\n  const Widgets = []\n\n    if (this.state[\"content\"] !== null)\n    {\n      for (let x in parsedData.default.ideas)\n      {\n        for (let y in parsedData.default.ideas[x])\n        { \n          if (parsedData.default.ideas[x][y] === \"Content\") \n          {\n            if(parsedData.default.ideas[x].ideas !== \"undefined\") \n            {\n              for (let z in parsedData.default.ideas[x].ideas) \n              {\n                if (parsedData.default.ideas[x].ideas[z].title === \"Widgets\")\n                {\n                  for (let d in parsedData.default.ideas[x].ideas[z].ideas)\n                  {\n                    var Description = \"\", ButtonText = \"\", Header = parsedData.default.ideas[x].ideas[z].ideas[d].title\n\n                    //Here we search for the attr node to see if there's text\n                    for (let j in parsedData.default.ideas[x].ideas[z].ideas[d]) {\n                      if (j === \"attr\") {\n                        for (let k in parsedData.default.ideas[x].ideas[z].ideas[d][j]) {\n                          for (let l in parsedData.default.ideas[x].ideas[z].ideas[d][j][k]) {\n                            if (l === \"text\") {\n                              Description = parsedData.default.ideas[x].ideas[z].ideas[d][j][k].text;\n                            }\n                          }\n                        }\n                      }\n                    }\n\n                    //Here we search the nodes \"Ideas\" child for the button text\n                    for (let c in parsedData.default.ideas[x].ideas[z].ideas[d].ideas) {\n                         ButtonText = parsedData.default.ideas[x].ideas[z].ideas[d].ideas[c].title;\n                    }\n                    const MessengerVar = ButtonText.toString()\n\n                      Widgets.push(<div class=\"col s12 m4\">\n                                    <div class=\"icon-block center\">\n                                      <button type=\"button\" class=\"btn btn-primary\" data-target=\"theme-modal\" onClick={ () => this.reloadContent(MessengerVar)}>{ ButtonText }</button>\n                                      <h4 class=\"center\">{ Header }</h4>\n                                      <p class=\"light center\">{ Description }</p>\n                                    </div>\n                                  </div>)\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n  // const Text = <div class=\"section no-pad-bot\">\n  //                 <div class=\"container\">\n  //                   <div class=\"row center\">\n  //                     <h2 class=\"header center brown-text text-darken-3\">Distributed, High Resolution Data</h2>\n  //                     <h5 class=\"header col s12 brown-text text-darken-3\">Distributed, high-resolution data can be annotated and linked from any standardised service in the web and included into our profiling and impact assessment tools. Very large datasets can be accommodated without deterioration in service - thanks to an innovative distributed data processing breakthrough.</h5>      \n  //                   </div>\n  //                   <div class=\"row center\">\n  //                     <a href=\"#data-modal\" id=\"download-button\" type=\"button\" class=\"btn btn-primary\">Read More</a>\n  //                   </div>\n  //                   <br></br>\n  //                 </div>\n  //               </div>  \n  \n  //const Background = <img id=\"img2\" src=\"background_image_4.png\" alt=\"Unsplashed background img 2\" ></img>\n\n  const Base = <div>\n                 <div class=\"container widgets\">\n                   {/* { Widgets } */}\n                   <div class=\"section\">\n                      <div class=\"row\">\n                        {Widgets}\n                      </div>\n                    </div>\n                 </div>\n                 <div class=\"parallax-container valign-wrapper\" >\n                   {/* {Text} */}\n                 </div>\n               </div>\n\n  return ( Base )\n}\n\nFooterFunc = () => { \n\n  const children = [] \n  const FooterStyle = { 'padding-left': '1%', 'padding-right': '1%' }\n  const base = (<footer class=\"page-footer font-small indigo\" style={ FooterStyle }><div class=\"row\">{children}</div></footer>)\n  var cardTitle\n  var cardSub \n\n  for (let x in parsedData.default.ideas){\n    for (let y in parsedData.default.ideas[x])\n    { \n      if (parsedData.default.ideas[x][y] === \"Footer\") \n      {\n        if(parsedData.default.ideas[x].ideas !== \"undefined\")\n        {\n          for (let z in parsedData.default.ideas[x].ideas)\n          {\n\n            cardTitle = \"\"\n            cardSub = \"\";\n            var type = false;\n            var linkList = []\n\n            for (let r in parsedData.default.ideas[x].ideas[z]){\n              if (r === \"title\")\n              {\n                cardTitle = parsedData.default.ideas[x].ideas[z][r];\n              }\n              else if (r === \"attr\")\n              {\n                for (let t in parsedData.default.ideas[x].ideas[z][r])\n                {\n                  for (let u in parsedData.default.ideas[x].ideas[z][r][t])\n                  {\n                    if (u === \"text\")\n                    {\n                      cardSub = <p class=\"white-text light\"> { parsedData.default.ideas[x].ideas[z][r][t][u] } </p>\n                    } \n                  }\n                }\n              }\n              else if (r === \"ideas\")\n              {\n                for (let t in parsedData.default.ideas[x].ideas[z][r])\n                {\n                  //Check link type here and determine if its a logo or something\n                  var link = (this.extractLink(parsedData.default.ideas[x].ideas[z][r][t].title));\n                  \n                  if (this.isImage(link)) { //It is an image, or more accurately it is a google drive doc\n                    cardSub = <img src={ link.replace(\"open\", \"uc\") } alt=\"img not loaded\"></img>\n                  } \n                  else { //it is not a google drive link\n                    type = true;\n                    linkList.push(<li><a class=\"white-text light\" href={ link }>{ parsedData.default.ideas[x].ideas[z][r][t].title.split(\"http\")[0] }</a></li>)\n                  }\n                }\n              }\n            }\n            if (type) {\n              children.push(<div class=\"col l3 s12\">\n                              <h5 class=\"white-text light\"> { cardTitle } </h5>\n                              <ul>{ linkList }</ul>\n                            </div>)\n            }\n            else {\n            children.push(<div class=\"col l3 s12\">\n                            <h5 class=\"white-text light\"> { cardTitle } </h5>\n                            { cardSub }\n                          </div>)\n            }\n          } \n        }\n      }\n    }\n  }\n  return base \n}\n\n  render() {\n\n    return (\n      <div className=\"App\" class=\"App\"> \n        {this.SideNavFunc()}\n        {this.HeaderFunc()}\n        {this.ContentFunc(this.state.content)} \n        {this.ContentWidgets()}       \n        {this.FooterFunc()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}