{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\LanceM\\\\Documents\\\\Javascript\\\\SAEON_Work\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport './CustomCSS.css';\nimport * as parsedData from './JSON_Dat.json';\nimport SideNav, { NavItem, NavIcon, NavText } from '@trendmicro/react-sidenav';\nimport { Button, Modal as _Modal, ModalBody, ModalHeader, ModalFooter } from 'mdbreact';\nimport '@trendmicro/react-sidenav/dist/react-sidenav.css';\nimport { Tooltip } from '@trendmicro/react-tooltip';\nimport '@trendmicro/react-tooltip/dist/react-tooltip.css'; //These imports are killing the modals\n\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.HeaderFunc = function () {\n      //Remeber to check for the header logo\n      var children = [];\n      var HeaderLogo;\n      var base = React.createElement(\"nav\", {\n        className: \"white\",\n        role: \"navigation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"nav-wrapper container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        id: \"logo-container\",\n        href: \"www.google.com\",\n        className: \"brand-logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"\\xA0 SARVA 3.0\"), React.createElement(\"ul\", {\n        className: \"right hide-on-med-and-down\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, children, React.createElement(\"i\", {\n        className: \"glyphicon glyphicon-search\",\n        style: {\n          fontSize: '1.75em',\n          color: 'rgb(104, 103, 103)'\n        },\n        onClick: function onClick() {\n          return _this.toggle('searchBar');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        className: _this.state[\"HideSearchBar\"] ? 'hidden black-text' : 'black-text',\n        type: \"text\",\n        name: \"Search\",\n        value: _this.state.SearchText,\n        onChange: _this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), React.createElement(\"i\", {\n        className: \"hidden glyphicon glyphicon-search\",\n        style: {\n          fontSize: '1.75em',\n          color: 'rgb(104, 103, 103)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: _this.state[\"HideSearchBar\"] ? 'hidden glyphicon glyphicon-search' : 'glyphicon glyphicon-search',\n        style: {\n          fontSize: '1.75em',\n          color: 'black',\n          background: 'transparent',\n          border: 'none'\n        },\n        onClick: function onClick() {\n          return _this.reloadContent(_this.state.SearchText, 'search');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })));\n\n      for (var x in parsedData.default.ideas) {\n        for (var y in parsedData.default.ideas[x]) {\n          if (parsedData.default.ideas[x][y] === \"NavBar\") {\n            var NavBarStyles = _this.BuildStyleVar(parsedData.default.ideas[x]);\n\n            if (parsedData.default.ideas[x].ideas !== \"undefined\") {\n              for (var z in parsedData.default.ideas[x].ideas) {\n                if (parsedData.default.ideas[x].ideas[z].title === \"Menu\") {\n                  for (var ddl in parsedData.default.ideas[x].ideas[z].ideas) {\n                    var innerArray = [];\n\n                    if (parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas !== \"undefined\") {\n                      for (var inner in parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas) {\n                        var ddlStyle = {\n                          fontSize: '12px',\n                          color: 'red',\n                          width: '100%',\n                          indent: '50px'\n                        };\n                        innerArray.push(React.createElement(\"li\", {\n                          style: ddlStyle,\n                          key: parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas[inner].id,\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 194\n                          },\n                          __self: this\n                        }, React.createElement(\"a\", {\n                          href: \"www.google.com\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 194\n                          },\n                          __self: this\n                        }, parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas[inner].title)));\n                      }\n                    }\n\n                    if (innerArray.length > 0) {\n                      children.push(React.createElement(\"li\", {\n                        className: \"sub-menu-parent\",\n                        \"tab-index\": \"0\",\n                        style: NavBarStyles,\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 199\n                        },\n                        __self: this\n                      }, React.createElement(\"a\", {\n                        href: \"www.google.com\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 200\n                        },\n                        __self: this\n                      }, parsedData.default.ideas[x].ideas[z].ideas[ddl].title, \" \\u21D3\"), React.createElement(\"ul\", {\n                        className: \"sub-menu\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 201\n                        },\n                        __self: this\n                      }, innerArray)));\n                    } else {\n                      children.push(React.createElement(\"li\", {\n                        styled: \"true\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 207\n                        },\n                        __self: this\n                      }, React.createElement(\"a\", {\n                        href: \"www.google.com\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 207\n                        },\n                        __self: this\n                      }, parsedData.default.ideas[x].ideas[z].ideas[ddl].title)));\n                    }\n                  }\n                } else if (parsedData.default.ideas[x].ideas[z].title === \"Logo\") {\n                  for (var count in parsedData.default.ideas[x].ideas[z].ideas) {\n                    if (_this.isImage(parsedData.default.ideas[x].ideas[z].ideas[count].title)) {\n                      HeaderLogo = _this.googleImage(_this.extractLink(parsedData.default.ideas[x].ideas[z].ideas[count].title));\n                    }\n                  }\n\n                  children.push(React.createElement(\"img\", {\n                    id: \"menu-logo\",\n                    alt: \"img not loaded\",\n                    src: HeaderLogo,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 217\n                    },\n                    __self: this\n                  }));\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return base;\n    };\n\n    _this.SideNavFunc = function () {\n      var InnerDdl = [],\n          Items = [];\n      var Base = React.createElement(SideNav, {\n        className: \"sidenav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(SideNav.Toggle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }), React.createElement(SideNav.Nav, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, Items));\n\n      var _loop = function _loop(o) {\n        for (var u in parsedData.default.ideas[o]) {\n          if (parsedData.default.ideas[o][u] === \"SideNav\") {\n            if (parsedData.default.ideas[o].ideas !== \"undefined\") {\n              var _loop2 = function _loop2(i) {\n                //Rember to check if you need to initialize anything\n                //Here check for a glyphicon, using home for now\n                menuItemTitle = \"\";\n                menuItemIcon = \"\";\n                menuItemTooltip = \"\";\n\n                if (parsedData.default.ideas[o].ideas[i].ideas !== \"undefined\") {\n                  InnerDdl = [];\n\n                  var _loop3 = function _loop3(w) {\n                    //Check what type it is, if its a modal, new tab, replace content and breadcrumb\n                    //If Modal\n                    var ModalId = '#' + parsedData.default.ideas[o].ideas[i].ideas[w].title.replace(/\\s/g, '');\n                    modalText = \"\";\n                    type = \"\";\n\n                    if (parsedData.default.ideas[o].ideas[i].ideas[w].attr !== \"undefined\") {\n                      for (var r in parsedData.default.ideas[o].ideas[i].ideas[w]) {\n                        for (var p in parsedData.default.ideas[o].ideas[i].ideas[w][r]) {\n                          for (var text in parsedData.default.ideas[o].ideas[i].ideas[w][r][p]) {\n                            if (text === \"text\") {\n                              // this will now possibly contain JSON\n                              innerJSON = JSON.parse(parsedData.default.ideas[o].ideas[i].ideas[w][r][p][text]);\n\n                              if (innerJSON !== undefined) {\n                                modalText = innerJSON.text;\n                              } else {\n                                modalText = parsedData.default.ideas[o].ideas[i].ideas[w][r][p][text];\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n\n                    if (type.toString() === \"modal\") {\n                      // If Modal\n                      alert(type);\n                      InnerDdl.push(React.createElement(NavItem, {\n                        eventKey: parsedData.default.ideas[o].ideas[i].ideas[w].id,\n                        key: parsedData.default.ideas[o].ideas[i].ideas[w].id,\n                        onClick: function onClick() {\n                          return _this.toggle(ModalId);\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 285\n                        },\n                        __self: this\n                      }, React.createElement(NavText, {\n                        style: {\n                          color: 'black !important'\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 286\n                        },\n                        __self: this\n                      }, React.createElement(\"a\", {\n                        type: \"button\",\n                        href: \"/#\",\n                        className: \"black-text\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 287\n                        },\n                        __self: this\n                      }, parsedData.default.ideas[o].ideas[i].ideas[w].title), _this.Modal(parsedData.default.ideas[o].ideas[i].ideas[w].title, modalText, parsedData.default.ideas[o].ideas[i].ideas[w].title.replace(/\\s/g, '')))));\n                    } else if (type === \"tab\") {\n                      // If new tab link  \n                      InnerDdl.push(React.createElement(NavItem, {\n                        eventKey: parsedData.default.ideas[o].ideas[i].ideas[w].id,\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 295\n                        },\n                        __self: this\n                      }, React.createElement(NavText, {\n                        style: {\n                          color: 'black !important'\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 296\n                        },\n                        __self: this\n                      }, React.createElement(\"a\", {\n                        href: \"http://google.com\",\n                        rel: \"noopener nereferrer\",\n                        class: \"black-text\",\n                        target: \"_blank\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 297\n                        },\n                        __self: this\n                      }, parsedData.default.ideas[o].ideas[i].ideas[w].title))));\n                    } else if (type === \"content\") {\n                      // If content reload with new breadcrumb\n                      InnerDdl.push(React.createElement(NavItem, {\n                        eventKey: parsedData.default.ideas[o].ideas[i].ideas[w].id,\n                        onClick: function onClick() {\n                          return _this.reloadContent(parsedData.default.ideas[o].ideas[i].ideas[w].title);\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 305\n                        },\n                        __self: this\n                      }, React.createElement(NavText, {\n                        style: {\n                          color: 'black !important'\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 306\n                        },\n                        __self: this\n                      }, parsedData.default.ideas[o].ideas[i].ideas[w].title)));\n                    } ///////////////////////////////////////////////////\n                    // InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} onClick= {() => popModal(parsedData.default.ideas[o].ideas[i].ideas[w].title, \"\")}>>\n                    //                 <NavText style={{color: 'black !important'}}>\n                    //                   {parsedData.default.ideas[o].ideas[i].ideas[w].title}\n                    //                 </NavText>\n                    //                 <dialog id=\"myDialog\">This is a dialog window</dialog>\n                    //               </NavItem>)\n\n                  };\n\n                  for (var w in parsedData.default.ideas[o].ideas[i].ideas) {\n                    _loop3(w);\n                  }\n\n                  if (parsedData.default.ideas[o].ideas[i].attr.note.text !== undefined) {\n                    menuItem = JSON.parse(parsedData.default.ideas[o].ideas[i].attr.note.text);\n\n                    if (menuItem.title !== undefined) {\n                      menuItemTitle = menuItem.title;\n                    }\n\n                    if (menuItem.icon !== undefined) {\n                      menuItemIcon = menuItem.icon;\n                    }\n\n                    if (menuItem.tooltip !== undefined) {\n                      menuItemTooltip = menuItem.tooltip;\n                    }\n                  }\n\n                  Items.push(React.createElement(NavItem, {\n                    eventKey: parsedData.default.ideas[o].ideas[i].id,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 338\n                    },\n                    __self: this\n                  }, React.createElement(NavIcon, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 339\n                    },\n                    __self: this\n                  }, React.createElement(\"i\", {\n                    className: menuItemIcon,\n                    style: {\n                      fontSize: '1.75em',\n                      color: '#fff'\n                    },\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 340\n                    },\n                    __self: this\n                  })), React.createElement(NavText, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 342\n                    },\n                    __self: this\n                  }, menuItemTooltip.length === 0 ? React.createElement(\"span\", {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 343\n                    },\n                    __self: this\n                  }, menuItemTitle) : React.createElement(Tooltip, {\n                    placement: \"top\",\n                    content: menuItemTooltip,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 343\n                    },\n                    __self: this\n                  }, React.createElement(\"span\", {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 343\n                    },\n                    __self: this\n                  }, menuItemTitle))), InnerDdl));\n                } else {\n                  if (parsedData.default.ideas[o].ideas[i].attr.note.text !== undefined) {\n                    menuItem = JSON.parse(parsedData.default.ideas[o].ideas[i].attr.note.text);\n                    menuItemTitle = menuItem.title;\n                    menuItemIcon = menuItem.icon;\n                    menuItemTooltip = menuItem.tooltip;\n                  }\n\n                  Items.push(React.createElement(NavItem, {\n                    eventKey: parsedData.default.ideas[o].ideas[i].id,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 358\n                    },\n                    __self: this\n                  }, React.createElement(NavIcon, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 359\n                    },\n                    __self: this\n                  }, React.createElement(\"i\", {\n                    className: menuItemIcon,\n                    style: {\n                      fontSize: '1.75em'\n                    },\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 360\n                    },\n                    __self: this\n                  })), React.createElement(NavText, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 362\n                    },\n                    __self: this\n                  }, menuItemTooltip.length === 0 ? React.createElement(\"span\", {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 364\n                    },\n                    __self: this\n                  }, menuItemTitle) : React.createElement(Tooltip, {\n                    placement: \"top\",\n                    content: menuItemTooltip,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 364\n                    },\n                    __self: this\n                  }, React.createElement(\"span\", {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 364\n                    },\n                    __self: this\n                  }, menuItemTitle)))));\n                }\n              };\n\n              for (var i in parsedData.default.ideas[o].ideas) {\n                _loop2(i);\n              }\n            }\n          }\n        }\n      };\n\n      for (var o in parsedData.default.ideas) {\n        var menuItemTitle, menuItemIcon, menuItemTooltip;\n        var modalText, type;\n        var innerJSON;\n        var menuItem;\n        var menuItem;\n\n        _loop(o);\n      }\n\n      return Base;\n    };\n\n    _this.ContentFunc = function (Page) {\n      //Make use of page var to reload page content\n      //So in here we will receive a node title, check the \"Content\" branch and iterate through its data where the node matches the Title\n      //See if the new page has/needs widgets then load it accordingly here\n      var DynamicContent = [];\n\n      if (Page !== \"\") {\n        if (_this.state[\"content\"] !== null) {\n          for (var x in parsedData.default.ideas) {\n            for (var y in parsedData.default.ideas[x]) {\n              if (parsedData.default.ideas[x][y] === \"Content\") {\n                if (parsedData.default.ideas[x].ideas !== \"undefined\") {\n                  for (var z in parsedData.default.ideas[x].ideas) {\n                    // Initialize your vairables\n                    var Heading = \"\",\n                        Subtext = \"\",\n                        ButtonText = \"\";\n\n                    for (var r in parsedData.default.ideas[x].ideas[z]) {\n                      // Get the header for this section's content\n                      if (r === \"title\") {\n                        Heading = parsedData.default.ideas[x].ideas[z][r];\n                      } // Get the actual content for the section\n\n\n                      if (r === \"attr\") {\n                        for (var w in parsedData.default.ideas[x].ideas[z][r]) {\n                          for (var g in parsedData.default.ideas[x].ideas[z][r][w]) {\n                            if (g === \"text\") {\n                              Subtext = React.createElement(\"div\", {\n                                class: \"row center\",\n                                __source: {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 407\n                                },\n                                __self: this\n                              }, React.createElement(\"h5\", {\n                                class: \"header col s12 text-darken-4\",\n                                __source: {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 408\n                                },\n                                __self: this\n                              }, parsedData.default.ideas[x].ideas[z][r][w][g]));\n                            }\n                          }\n                        }\n                      } //Check the \"Ideas\" for buttons\n\n\n                      for (var j in parsedData.default.ideas[x].ideas[z].ideas) {\n                        for (var k in parsedData.default.ideas[x].ideas[z].ideas[j]) {\n                          if (k === \"title\") {\n                            ButtonText = parsedData.default.ideas[x].ideas[z].ideas[j][k];\n                          }\n                        }\n                      }\n                    }\n\n                    if (Heading !== \"Widgets\") {\n                      if (ButtonText.length === 0) {\n                        DynamicContent.push(React.createElement(\"div\", {\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 428\n                          },\n                          __self: this\n                        }, React.createElement(\"h2\", {\n                          class: \"header center text-darken-4\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 428\n                          },\n                          __self: this\n                        }, Heading), Subtext));\n                      } else if (ButtonText.length > 0) {\n                        DynamicContent.push(React.createElement(\"div\", {\n                          class: \"parallax-container valign-wrapper\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 431\n                          },\n                          __self: this\n                        }, React.createElement(\"div\", {\n                          class: \"section no-pad-bot\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 432\n                          },\n                          __self: this\n                        }, React.createElement(\"div\", {\n                          class: \"container\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 433\n                          },\n                          __self: this\n                        }, React.createElement(\"div\", {\n                          class: \"row center\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 434\n                          },\n                          __self: this\n                        }, React.createElement(\"h2\", {\n                          class: \"header center brown-text text-darken-3\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 435\n                          },\n                          __self: this\n                        }, Heading), React.createElement(\"h5\", {\n                          class: \"header col s12 brown-text text-darken-3\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 436\n                          },\n                          __self: this\n                        }, Subtext)), React.createElement(\"div\", {\n                          class: \"row center\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 438\n                          },\n                          __self: this\n                        }, React.createElement(\"a\", {\n                          href: \"#data-modal\",\n                          id: \"download-button\",\n                          type: \"button\",\n                          class: \"btn btn-primary\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 439\n                          },\n                          __self: this\n                        }, ButtonText)), React.createElement(\"br\", {\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 441\n                          },\n                          __self: this\n                        })))));\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      var Base = React.createElement(\"div\", {\n        id: \"index-banner\",\n        className: \"parallax-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"section no-pad-bot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460\n        },\n        __self: this\n      }), DynamicContent)));\n      return Base;\n    };\n\n    _this.ContentWidgets = function (Content) {\n      //#region Static Widgets\n      // const Widgets = <div class=\"section\">\n      //                   <div class=\"row\">\n      //                     <div class=\"col s12 m4\">\n      //                       <div class=\"icon-block center\">\n      //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"search-modal\" onClick={ () => this.reloadContent('Search')}>Search</button>   \n      //                         <h5 class=\"center\">Search and Discover Resources</h5>\n      //                         <p class=\"light center\">Use simple or advanced tools to search for data meeting your criteria.</p>\n      //                       </div>\n      //                     </div>\n      //                     <div class=\"col s12 m4\">\n      //                       <div class=\"icon-block center\">\n      //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"theme-modal\" onClick={ () => this.reloadContent('Themes')}>Themes</button>            \n      //                         <h5 class=\"center\">Explore Available Resources by Sector or Theme</h5>\n      //                         <p class=\"light center\">Browse, preview, and access data and narratives in popular collections and in common themes.</p>\n      //                       </div>\n      //                     </div>\n      //                     <div class=\"col s12 m4\">\n      //                       <div class=\"icon-block center\">\n      //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"contr-modal\">Contribute</button>  \n      //                         <h5 class=\"center\">Tell Us About Your Area of Interest</h5>\n      //                         <p class=\"light center\"><a href=\"www.google.com\">Register</a> as a user and contribute data, assessments, and media.</p>\n      //                       </div>\n      //                     </div>\n      //                     </div>\n      //                 </div>\n      //#endregion\n      var Widgets = [];\n\n      if (_this.state[\"content\"] !== null) {\n        for (var x in parsedData.default.ideas) {\n          for (var y in parsedData.default.ideas[x]) {\n            if (parsedData.default.ideas[x][y] === \"Content\") {\n              if (parsedData.default.ideas[x].ideas !== \"undefined\") {\n                for (var z in parsedData.default.ideas[x].ideas) {\n                  if (parsedData.default.ideas[x].ideas[z].title === \"Widgets\") {\n                    var _loop4 = function _loop4(d) {\n                      Description = \"\";\n                      ButtonText = \"\";\n                      Header = parsedData.default.ideas[x].ideas[z].ideas[d].title; //Here we search for the attr node to see if there's text\n\n                      for (var j in parsedData.default.ideas[x].ideas[z].ideas[d]) {\n                        if (j === \"attr\") {\n                          for (var k in parsedData.default.ideas[x].ideas[z].ideas[d][j]) {\n                            for (var l in parsedData.default.ideas[x].ideas[z].ideas[d][j][k]) {\n                              if (l === \"text\") {\n                                Description = parsedData.default.ideas[x].ideas[z].ideas[d][j][k].text;\n                              }\n                            }\n                          }\n                        }\n                      } //Here we search the nodes \"Ideas\" child for the button text\n\n\n                      for (var c in parsedData.default.ideas[x].ideas[z].ideas[d].ideas) {\n                        ButtonText = parsedData.default.ideas[x].ideas[z].ideas[d].ideas[c].title;\n                      }\n\n                      var MessengerVar = ButtonText.toString();\n                      Widgets.push(React.createElement(\"div\", {\n                        className: \"col s12 m4\",\n                        key: parsedData.default.ideas[x].ideas[z].ideas[d].id,\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 540\n                        },\n                        __self: this\n                      }, React.createElement(\"div\", {\n                        className: \"icon-block center\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 541\n                        },\n                        __self: this\n                      }, React.createElement(\"button\", {\n                        type: \"button\",\n                        className: \"btn btn-primary\",\n                        \"data-target\": \"theme-modal\",\n                        onClick: function onClick() {\n                          return _this.reloadContent(MessengerVar, 'widget');\n                        },\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 542\n                        },\n                        __self: this\n                      }, ButtonText), React.createElement(\"h4\", {\n                        className: \"center\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 543\n                        },\n                        __self: this\n                      }, Header), React.createElement(\"p\", {\n                        className: \"light center\",\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 544\n                        },\n                        __self: this\n                      }, Description))));\n                    };\n\n                    for (var d in parsedData.default.ideas[x].ideas[z].ideas) {\n                      var Description, ButtonText, Header;\n\n                      _loop4(d);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      var Base = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container widgets\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559\n        },\n        __self: this\n      }, Widgets))), React.createElement(\"div\", {\n        className: \"parallax-container valign-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564\n        },\n        __self: this\n      }));\n\n      if (Content.length === 0) {\n        return Base;\n      } else {\n        return null;\n      }\n    };\n\n    _this.FooterFunc = function () {\n      var children = [];\n      var FooterStyle; //= { 'padding-left': '1%', 'padding-right': '1%' }\n\n      var cardTitle;\n      var cardSub;\n\n      for (var x in parsedData.default.ideas) {\n        for (var y in parsedData.default.ideas[x]) {\n          if (parsedData.default.ideas[x][y] === \"Footer\") {\n            FooterStyle = _this.BuildStyleVar(parsedData.default.ideas[x]);\n\n            if (parsedData.default.ideas[x].ideas !== \"undefined\") {\n              for (var z in parsedData.default.ideas[x].ideas) {\n                cardTitle = \"\";\n                cardSub = \"\";\n                var type = false;\n                var linkList = [];\n\n                for (var r in parsedData.default.ideas[x].ideas[z]) {\n                  if (r === \"title\") {\n                    cardTitle = parsedData.default.ideas[x].ideas[z][r];\n                  } else if (r === \"attr\") {\n                    for (var t in parsedData.default.ideas[x].ideas[z][r]) {\n                      for (var u in parsedData.default.ideas[x].ideas[z][r][t]) {\n                        if (u === \"text\") {\n                          cardSub = React.createElement(\"p\", {\n                            className: \"white-text light\",\n                            __source: {\n                              fileName: _jsxFileName,\n                              lineNumber: 613\n                            },\n                            __self: this\n                          }, \" \", parsedData.default.ideas[x].ideas[z][r][t][u], \" \");\n                        }\n                      }\n                    }\n                  } else if (r === \"ideas\") {\n                    for (var _t in parsedData.default.ideas[x].ideas[z][r]) {\n                      //Check link type here and determine if its a logo or something\n                      var link = _this.extractLink(parsedData.default.ideas[x].ideas[z][r][_t].title);\n\n                      if (_this.isImage(link)) {\n                        //It is an image, or more accurately it is a google drive doc\n                        cardSub = React.createElement(\"img\", {\n                          src: link.replace(\"open\", \"uc\"),\n                          alt: \"img not loaded\",\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 626\n                          },\n                          __self: this\n                        });\n                      } else {\n                        //it is not a google drive link\n                        type = true;\n                        linkList.push(React.createElement(\"li\", {\n                          key: parsedData.default.ideas[x].ideas[z][r][_t].id,\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 630\n                          },\n                          __self: this\n                        }, React.createElement(\"a\", {\n                          className: \"white-text light\",\n                          href: link,\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 631\n                          },\n                          __self: this\n                        }, parsedData.default.ideas[x].ideas[z][r][_t].title.split(\"http\")[0])));\n                      }\n                    }\n                  }\n                }\n\n                if (type) {\n                  children.push(React.createElement(\"div\", {\n                    className: \"col l3 s12\",\n                    key: parsedData.default.ideas[x].ideas[z].id + x.toString(),\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 640\n                    },\n                    __self: this\n                  }, React.createElement(\"h5\", {\n                    className: \"white-text light\",\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 641\n                    },\n                    __self: this\n                  }, \" \", cardTitle, \" \"), React.createElement(\"ul\", {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 642\n                    },\n                    __self: this\n                  }, linkList)));\n                } else {\n                  children.push(React.createElement(\"div\", {\n                    className: \"col l3 s12\",\n                    key: parsedData.default.ideas[x].ideas[z].id + x.toString(),\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 646\n                    },\n                    __self: this\n                  }, React.createElement(\"h5\", {\n                    className: \"white-text light\",\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 647\n                    },\n                    __self: this\n                  }, \" \", cardTitle, \" \"), cardSub));\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return React.createElement(\"footer\", {\n        className: \"page-footer font-small indigo\",\n        style: FooterStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 657\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 658\n        },\n        __self: this\n      }, children));\n    };\n\n    _this.state = {\n      content: \"\",\n      widgets: \"\",\n      ReadingRisk: false,\n      ContentHeading: \"\",\n      ContentBody: \"\",\n      HideSearchBar: true,\n      SearchText: \"\"\n    };\n    _this.HeaderFunc = _this.HeaderFunc.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadContent = _this.reloadContent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadWidgets = _this.reloadWidgets.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.SideNavFunc = _this.SideNavFunc.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.Modal = _this.Modal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.BuildStyleVar = _this.BuildStyleVar.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //#region Helpers \n\n\n  _createClass(App, [{\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        SearchText: event.target.value\n      });\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(modal) {\n      if (modal.toString() !== \"searchBar\") {\n        var modalNumber = modal.replace(\"#\", \"\");\n        this.setState(_defineProperty({}, modalNumber, !this.state[modalNumber]));\n      } else {\n        this.setState(_defineProperty({}, \"HideSearchBar\", !this.state[\"HideSearchBar\"]));\n      }\n    }\n  }, {\n    key: \"reloadContent\",\n    value: function reloadContent(path, type) {\n      //See if we are going to search the tree or if we will receive the content somehow else \n      this.setState({\n        content: path\n      }); //, {contentType: type}) \n      //this.setState({widgets : widget})\n\n      if (type.toString() === \"search\") {\n        //Create a modal instance here with an iframe and pop it\n        var iframeSrc = 'http://www.sasdi.net/search.aspx?anytext=' + path.toString() + '&noframe=true';\n        var modal = React.createElement(_Modal, {\n          isOpen: \"true\",\n          size: \"fluid\",\n          background: \"grey\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, React.createElement(ModalHeader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }), React.createElement(ModalBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, React.createElement(\"iframe\", {\n          src: iframeSrc,\n          title: \"#\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        })), React.createElement(ModalFooter, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, React.createElement(Button, {\n          color: \"secondary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, \"Close\"), ' '));\n        alert(modal);\n      }\n    }\n  }, {\n    key: \"reloadWidgets\",\n    value: function reloadWidgets(content) {\n      this.setState({\n        widgets: content\n      });\n    }\n  }, {\n    key: \"extractLink\",\n    value: function extractLink(str) {\n      var link;\n\n      if (str.indexOf(\"http\") > -1) {\n        link = str.split('http')[1];\n      } else {\n        link = \"\";\n      }\n\n      return \"http\" + link;\n    }\n  }, {\n    key: \"isImage\",\n    value: function isImage(str) {\n      if (str.toString().includes(\"drive.google\")) //Check if it is an image\n        {\n          return true;\n        }\n\n      return false;\n    }\n  }, {\n    key: \"googleImage\",\n    value: function googleImage(link) {\n      return link.replace(\"open\", \"uc\");\n    }\n  }, {\n    key: \"Modal\",\n    value: function Modal(header, innerText, id) {\n      var _this2 = this;\n\n      var CustomModal = function CustomModal() {\n        return React.createElement(_Modal, {\n          isOpen: _this2.state[id],\n          toggle: function toggle() {\n            return _this2.toggle(id);\n          },\n          size: \"fluid\",\n          background: \"grey\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(ModalHeader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, header), React.createElement(ModalBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"text-black modal-innet-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, innerText)), React.createElement(ModalFooter, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(Button, {\n          color: \"secondary\",\n          onClick: function onClick() {\n            return _this2.toggle(id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, \"Close\"), ' '));\n      };\n\n      return ReactDOM.createPortal(React.createElement(CustomModal, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), document.getElementById('root'));\n    }\n  }, {\n    key: \"BuildStyleVar\",\n    value: function BuildStyleVar(NodePath) {\n      // Here we are going to get the path to the node (will prob be a attr node) containing the styles \n      // for the tag/content and process it. Will return a var with all the style's structured and correct\n      var Style = \"\";\n\n      for (var t in NodePath) {\n        if (t === \"attr\") {\n          for (var y in NodePath[t]) {\n            if (y === \"style\") {\n              for (var u in NodePath[t][y]) {\n                Style += u.toString() + \":\" + NodePath[t][y][u].toString() + \";\";\n              }\n            }\n          }\n        }\n      } // 2ⁿᵈ step logic\n\n\n      var camelize = function camelize(string) {\n        return string.replace(/-([a-z])/gi, function (s, group) {\n          return group.toUpperCase();\n        });\n      }; // 1ˢᵗ step logic which calls the 2ⁿᵈ step logic\n\n\n      var style2object = function style2object(style) {\n        return style.split(';').filter(function (s) {\n          return s.length;\n        }).reduce(function (a, b) {\n          var keyValue = b.split(':');\n          a[camelize(keyValue[0])] = keyValue[1];\n          return a;\n        }, {});\n      };\n\n      return style2object(Style);\n    } //#endregion\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _React$createElement;\n\n      return React.createElement(\"div\", (_React$createElement = {\n        className: \"App\"\n      }, _defineProperty(_React$createElement, \"className\", this.state[\"HideSearchBar\"] ? 'animateReverse' : 'animate'), _defineProperty(_React$createElement, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement), this.SideNavFunc(), this.HeaderFunc(), this.ContentFunc(this.state.content), this.ContentWidgets(this.state.widgets), this.FooterFunc());\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\LanceM\\Documents\\Javascript\\SAEON_Work\\client\\src\\App.js"],"names":["React","Component","ReactDOM","parsedData","SideNav","NavItem","NavIcon","NavText","Button","Modal","ModalBody","ModalHeader","ModalFooter","Tooltip","App","props","HeaderFunc","children","HeaderLogo","base","fontSize","color","toggle","state","SearchText","handleChange","background","border","reloadContent","x","default","ideas","y","NavBarStyles","BuildStyleVar","z","title","ddl","innerArray","inner","ddlStyle","width","indent","push","id","length","count","isImage","googleImage","extractLink","SideNavFunc","InnerDdl","Items","Base","o","u","i","menuItemTitle","menuItemIcon","menuItemTooltip","w","ModalId","replace","modalText","type","attr","r","p","text","innerJSON","JSON","parse","undefined","toString","alert","note","menuItem","icon","tooltip","ContentFunc","Page","DynamicContent","Heading","Subtext","ButtonText","g","j","k","ContentWidgets","Content","Widgets","d","Description","Header","l","c","MessengerVar","FooterFunc","FooterStyle","cardTitle","cardSub","linkList","t","link","split","content","widgets","ReadingRisk","ContentHeading","ContentBody","HideSearchBar","bind","reloadWidgets","event","setState","target","value","modal","modalNumber","path","iframeSrc","str","indexOf","includes","header","innerText","CustomModal","createPortal","document","getElementById","NodePath","Style","camelize","string","s","group","toUpperCase","style2object","style","filter","reduce","a","b","keyValue"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport './CustomCSS.css'; \nimport * as parsedData from './JSON_Dat.json';\nimport SideNav, { NavItem, NavIcon, NavText } from '@trendmicro/react-sidenav';\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from 'mdbreact';\nimport '@trendmicro/react-sidenav/dist/react-sidenav.css';\n\nimport { Tooltip } from '@trendmicro/react-tooltip';\nimport '@trendmicro/react-tooltip/dist/react-tooltip.css';\n\n//These imports are killing the modals\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nclass App extends Component { \n\nconstructor(props) {\n  super(props);\n  this.state = {content: \"\", widgets: \"\", ReadingRisk: false, ContentHeading: \"\", ContentBody: \"\", HideSearchBar: true, SearchText: \"\" };\n  this.HeaderFunc = this.HeaderFunc.bind(this)\n  this.reloadContent = this.reloadContent.bind(this)\n  this.reloadWidgets = this.reloadWidgets.bind(this)\n  this.SideNavFunc = this.SideNavFunc.bind(this)\n  this.Modal = this.Modal.bind(this)\n  this.BuildStyleVar = this.BuildStyleVar.bind(this)\n  this.toggle = this.toggle.bind(this)\n  this.handleChange = this.handleChange.bind(this)\n} \n\n//#region Helpers \n\nhandleChange(event) {\n  this.setState({SearchText: event.target.value});\n}\n\ntoggle(modal) {\n  \n  if (modal.toString() !== \"searchBar\") {\n    let modalNumber = modal.replace(\"#\",\"\")\n    this.setState({\n      [modalNumber]: !this.state[modalNumber]\n    });\n  }\n  else {\n    this.setState({ [\"HideSearchBar\"]: !this.state[\"HideSearchBar\"] });\n  }\n}\n\nreloadContent(path, type) {\n  \n  //See if we are going to search the tree or if we will receive the content somehow else \n    this.setState({content : path})//, {contentType: type}) \n    //this.setState({widgets : widget})\n\n    if (type.toString() === \"search\"){\n      //Create a modal instance here with an iframe and pop it\n\n      var iframeSrc = 'http://www.sasdi.net/search.aspx?anytext=' + path.toString() + '&noframe=true';\n      var modal = (<Modal isOpen='true' size=\"fluid\" background=\"grey\">\n                    <ModalHeader></ModalHeader>\n                    <ModalBody>\n                      <iframe src={iframeSrc} title=\"#\"></iframe>\n                    </ModalBody>\n                    <ModalFooter>\n                      <Button color=\"secondary\">Close</Button>{' '}\n                    </ModalFooter>\n                  </Modal>)\n      alert(modal)\n    }\n}\n\nreloadWidgets(content) {\n  this.setState({widgets : content})\n}\n\nextractLink(str) {\n  var link;\n\n  if (str.indexOf(\"http\") > -1) {\n      link = str.split('http')[1];\n  }\n  else {\n      link = \"\";\n  }\n\n  return \"http\" + link;\n}\n\nisImage(str) {\n  if (str.toString().includes(\"drive.google\")) //Check if it is an image\n  {\n    return true;\n  }\n\n  return false;\n}\n\ngoogleImage(link){\n  return link.replace(\"open\", \"uc\");\n} \n \nModal(header, innerText, id) {\n  \n    const CustomModal = () => \n    (<Modal isOpen={this.state[id]} toggle={() => this.toggle(id)} size=\"fluid\" background=\"grey\">\n      <ModalHeader>{header}</ModalHeader>\n      <ModalBody>\n        <div className=\"text-black modal-innet-text\">{innerText}</div>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={() => this.toggle(id)}>Close</Button>{' '}\n      </ModalFooter>\n     </Modal>); \n\n  return ReactDOM.createPortal( <CustomModal/>, document.getElementById('root'));\n}\n\nBuildStyleVar(NodePath){\n  // Here we are going to get the path to the node (will prob be a attr node) containing the styles \n  // for the tag/content and process it. Will return a var with all the style's structured and correct\n\n  var Style = \"\"\n \n  for (let t in NodePath) {\n    if (t === \"attr\"){\n      for (let y in NodePath[t]) {\n        if (y === \"style\") {\n          for (let u in NodePath[t][y]) {\n            Style += (u.toString() + \":\" + NodePath[t][y][u].toString() + \";\");\n          }\n        }\n      }\n    }\n  }\n\n  // 2ⁿᵈ step logic\n  const camelize = (string) =>  string.replace(/-([a-z])/gi,(s, group) =>  group.toUpperCase());\n  \n  // 1ˢᵗ step logic which calls the 2ⁿᵈ step logic\n  const style2object = (style) => style.split(';').filter(s => s.length)\n          .reduce((a, b) => {\n            const keyValue = b.split(':');\n            a[camelize(keyValue[0])] = keyValue[1] ; \n            return a;\n          } ,{}); \n\n  return style2object(Style)\n}\n\n//#endregion\n\nHeaderFunc = () => {\n  //Remeber to check for the header logo\n  const children = []\n  var HeaderLogo\n  const base = (<nav className=\"white\" role=\"navigation\">\n                  <div className=\"nav-wrapper container\">\n                    <a id=\"logo-container\" href=\"www.google.com\" className=\"brand-logo\">&nbsp; SARVA 3.0</a>\n                    <ul className=\"right hide-on-med-and-down\">\n                      {children} \n                      <i className=\"glyphicon glyphicon-search\" style={{ fontSize: '1.75em', color: 'rgb(104, 103, 103)'}} onClick={() => this.toggle('searchBar')} />\n                    </ul>\n                    <input className={ this.state[\"HideSearchBar\"] ? 'hidden black-text' : 'black-text'} type=\"text\" name=\"Search\" value={this.state.SearchText} onChange={this.handleChange} ></input>\n                    <i className='hidden glyphicon glyphicon-search' style={{ fontSize: '1.75em', color: 'rgb(104, 103, 103)'}} />\n                    <button className={ this.state[\"HideSearchBar\"] ? 'hidden glyphicon glyphicon-search' : 'glyphicon glyphicon-search' } style={{ fontSize: '1.75em', color: 'black', background: 'transparent', border: 'none' }} onClick={ () => this.reloadContent(this.state.SearchText, 'search')}></button>\n                  </div>\n                </nav>)\n\n  for (let x in parsedData.default.ideas){\n    for (let y in parsedData.default.ideas[x])\n    { \n      if (parsedData.default.ideas[x][y] === \"NavBar\") \n      {\n        var NavBarStyles = this.BuildStyleVar(parsedData.default.ideas[x]);\n        if(parsedData.default.ideas[x].ideas !== \"undefined\"){\n          for (let z in parsedData.default.ideas[x].ideas){\n            if (parsedData.default.ideas[x].ideas[z].title === \"Menu\"){\n              for (let ddl in parsedData.default.ideas[x].ideas[z].ideas){\n                const innerArray = []\n                if (parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas !== \"undefined\")\n                {\n                  for (let inner in parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas)\n                  {\n                    const ddlStyle = { \n                                        fontSize: '12px',\n                                        color: 'red',\n                                        width: '100%',\n                                        indent: '50px'\n                                     }; \n                    \n                     innerArray.push(<li style={ddlStyle} key={parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas[inner].id}><a href=\"www.google.com\" >{parsedData.default.ideas[x].ideas[z].ideas[ddl].ideas[inner].title}</a></li>)\n                  }\n                }\n                if (innerArray.length > 0)  \n                {\n                  children.push(<li className=\"sub-menu-parent\" tab-index=\"0\" style={NavBarStyles}>\n                                  <a href=\"www.google.com\">{parsedData.default.ideas[x].ideas[z].ideas[ddl].title} &#8659;</a>\n                                  <ul className=\"sub-menu\">\n                                    {innerArray}\n                                  </ul>\n                                </li>)\n                }\n                else {\n                  children.push(<li styled=\"true\"><a href=\"www.google.com\">{parsedData.default.ideas[x].ideas[z].ideas[ddl].title}</a></li>)\n                }\n              }\n            }\n            else if (parsedData.default.ideas[x].ideas[z].title === \"Logo\"){\n              for (let count in parsedData.default.ideas[x].ideas[z].ideas) {\n                if (this.isImage(parsedData.default.ideas[x].ideas[z].ideas[count].title)){\n                  HeaderLogo = this.googleImage(this.extractLink(parsedData.default.ideas[x].ideas[z].ideas[count].title))\n                }\n              }\n              children.push(<img id=\"menu-logo\" alt=\"img not loaded\" src={HeaderLogo}></img> )\n            }\n          } \n        }\n      }\n    }\n  }\n  return base \n}\n\nSideNavFunc = () => {\n\nvar InnerDdl = [], Items = [];\n\nconst Base = <SideNav className=\"sidenav\"><SideNav.Toggle /><SideNav.Nav>{ Items }</SideNav.Nav></SideNav>\n\nfor (let o in parsedData.default.ideas)\n{\n  for (let u in parsedData.default.ideas[o])\n  {\n    if (parsedData.default.ideas[o][u] === \"SideNav\") \n    {\n      if(parsedData.default.ideas[o].ideas !== \"undefined\")\n      {\n        for (let i in parsedData.default.ideas[o].ideas)\n        {\n          //Rember to check if you need to initialize anything\n\n          //Here check for a glyphicon, using home for now\n          var menuItemTitle = \"\", menuItemIcon = \"\", menuItemTooltip = \"\";\n\n          if (parsedData.default.ideas[o].ideas[i].ideas !== \"undefined\")\n          {\n            InnerDdl = []\n            for (let w in parsedData.default.ideas[o].ideas[i].ideas)\n            {\n              //Check what type it is, if its a modal, new tab, replace content and breadcrumb\n\n              //If Modal\n              const ModalId = '#' + parsedData.default.ideas[o].ideas[i].ideas[w].title.replace(/\\s/g, '');\n              var modalText = \"\", type = \"\"\n\n              if (parsedData.default.ideas[o].ideas[i].ideas[w].attr !== \"undefined\")\n              {\n                for (let r in parsedData.default.ideas[o].ideas[i].ideas[w]){\n                  for ( let p in parsedData.default.ideas[o].ideas[i].ideas[w][r]){\n                    for (let text in parsedData.default.ideas[o].ideas[i].ideas[w][r][p]){\n                      if (text === \"text\"){\n                        \n                        // this will now possibly contain JSON\n\n                        var innerJSON = JSON.parse(parsedData.default.ideas[o].ideas[i].ideas[w][r][p][text])\n                        \n                        if (innerJSON !== undefined) {\n                          modalText = innerJSON.text;\n                        }\n                        else {\n                          modalText = parsedData.default.ideas[o].ideas[i].ideas[w][r][p][text];\n                        }\n                      } \n                    }\n                  }\n                }\n              }\n\n              if (type.toString() === \"modal\") {\n                // If Modal\n                alert(type)\n                InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} key={parsedData.default.ideas[o].ideas[i].ideas[w].id} onClick={() => this.toggle(ModalId)}>\n                                <NavText style={{color: 'black !important'}}>\n                                  <a type=\"button\" href=\"/#\" className=\"black-text\">{parsedData.default.ideas[o].ideas[i].ideas[w].title}</a>\n                                  {this.Modal(parsedData.default.ideas[o].ideas[i].ideas[w].title, modalText, parsedData.default.ideas[o].ideas[i].ideas[w].title.replace(/\\s/g, ''))}\n                                </NavText>\n                              </NavItem>)\n              }\n              else if (type === \"tab\")\n              {\n                // If new tab link  \n                InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} >\n                                <NavText style={{color: 'black !important'}}>\n                                <a href=\"http://google.com\" rel=\"noopener nereferrer\" class=\"black-text\" target='_blank'>{parsedData.default.ideas[o].ideas[i].ideas[w].title}</a>\n                                </NavText>\n                              </NavItem>)\n              }\n              else if (type === \"content\")\n              {\n                // If content reload with new breadcrumb\n              \n                InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} onClick= {() => this.reloadContent(parsedData.default.ideas[o].ideas[i].ideas[w].title)}>\n                                <NavText style={{color: 'black !important'}}>\n                                {parsedData.default.ideas[o].ideas[i].ideas[w].title}\n                                </NavText>\n                              </NavItem>)\n              }\n\n              ///////////////////////////////////////////////////\n\n              // InnerDdl.push(<NavItem eventKey={parsedData.default.ideas[o].ideas[i].ideas[w].id} onClick= {() => popModal(parsedData.default.ideas[o].ideas[i].ideas[w].title, \"\")}>>\n              //                 <NavText style={{color: 'black !important'}}>\n              //                   {parsedData.default.ideas[o].ideas[i].ideas[w].title}\n              //                 </NavText>\n              //                 <dialog id=\"myDialog\">This is a dialog window</dialog>\n              //               </NavItem>)\n            }\n\n            if (parsedData.default.ideas[o].ideas[i].attr.note.text !== undefined) {\n              var menuItem = JSON.parse(parsedData.default.ideas[o].ideas[i].attr.note.text)\n\n              if (menuItem.title !== undefined) {\n                menuItemTitle = menuItem.title;\n              }\n\n              if (menuItem.icon !== undefined) {\n                menuItemIcon = menuItem.icon;\n              }\n\n              if (menuItem.tooltip !== undefined) {\n                menuItemTooltip = menuItem.tooltip;\n              }\n            }\n\n            Items.push(<NavItem eventKey={ parsedData.default.ideas[o].ideas[i].id }>\n                        <NavIcon>\n                          <i className={ menuItemIcon } style={{ fontSize: '1.75em', color: '#fff' }} />\n                        </NavIcon>\n                        <NavText>\n                          { menuItemTooltip.length === 0 ? (<span>{ menuItemTitle }</span>) : (<Tooltip placement=\"top\" content={ menuItemTooltip }><span>{ menuItemTitle }</span></Tooltip>)}\n                        </NavText>\n                        {InnerDdl}\n                      </NavItem>) \n          }\n          else{ \n            \n            if (parsedData.default.ideas[o].ideas[i].attr.note.text !== undefined) {\n              var menuItem = JSON.parse(parsedData.default.ideas[o].ideas[i].attr.note.text)\n\n              menuItemTitle = menuItem.title;\n              menuItemIcon = menuItem.icon;\n              menuItemTooltip = menuItem.tooltip;\n            }\n\n            Items.push(<NavItem eventKey={ parsedData.default.ideas[o].ideas[i].id }>\n                        <NavIcon>\n                          <i className={ menuItemIcon } style={{ fontSize: '1.75em' }}/>\n                        </NavIcon>\n                        <NavText>\n                          {/* <Tooltip placement=\"top\" content={ menuItemTooltip }><span>{ menuItemTitle }</span></Tooltip> */}\n                          { menuItemTooltip.length === 0 ? (<span>{ menuItemTitle }</span>) : (<Tooltip placement=\"top\" content={ menuItemTooltip }><span>{ menuItemTitle }</span></Tooltip>)}\n                        </NavText>\n                      </NavItem>)\n          }\n        }\n      }\n    }\n  }\n}\n\n\nreturn (Base)\n}\n\nContentFunc = (Page) => {\n  //Make use of page var to reload page content\n  //So in here we will receive a node title, check the \"Content\" branch and iterate through its data where the node matches the Title\n  \n  //See if the new page has/needs widgets then load it accordingly here\n\n  var DynamicContent = []\n\n  if (Page !== \"\") {\n    if (this.state[\"content\"] !== null) {\n      for (let x in parsedData.default.ideas) {\n        for (let y in parsedData.default.ideas[x]) { \n          if (parsedData.default.ideas[x][y] === \"Content\") {\n            if(parsedData.default.ideas[x].ideas !== \"undefined\") {\n              for (let z in parsedData.default.ideas[x].ideas) {\n                // Initialize your vairables\n                var Heading = \"\", Subtext = \"\", ButtonText = \"\"\n                \n                for (let r in parsedData.default.ideas[x].ideas[z]) {\n                  // Get the header for this section's content\n                  if (r === \"title\") {\n                    Heading = parsedData.default.ideas[x].ideas[z][r]\n                  }\n                  \n                  // Get the actual content for the section\n                  if (r === \"attr\") {\n                    for (let w in parsedData.default.ideas[x].ideas[z][r]) {\n                      for (let g in parsedData.default.ideas[x].ideas[z][r][w]) {\n                        if (g === \"text\") {\n                          Subtext = <div class=\"row center\">\n                                      <h5 class=\"header col s12 text-darken-4\">{ parsedData.default.ideas[x].ideas[z][r][w][g] }</h5>\n                                    </div>\n                        }\n                      }\n                    }\n                  }\n\n                  //Check the \"Ideas\" for buttons\n                  for (let j in parsedData.default.ideas[x].ideas[z].ideas) {\n                    for (let k in parsedData.default.ideas[x].ideas[z].ideas[j]) {\n                      if (k === \"title\") {\n                        ButtonText = parsedData.default.ideas[x].ideas[z].ideas[j][k]\n                      }\n                    }\n                  }\n\n                }\n\n                if (Heading !== \"Widgets\" ){\n                  if (ButtonText.length === 0) {\n                    DynamicContent.push(<div><h2 class=\"header center text-darken-4\">{ Heading }</h2>{Subtext}</div>)\n                  }\n                  else if (ButtonText.length > 0) {\n                    DynamicContent.push(<div class=\"parallax-container valign-wrapper\">\n                                          <div class=\"section no-pad-bot\">\n                                            <div class=\"container\">\n                                              <div class=\"row center\">\n                                                <h2 class=\"header center brown-text text-darken-3\">{ Heading }</h2>\n                                                <h5 class=\"header col s12 brown-text text-darken-3\">{ Subtext }</h5>\n                                              </div>\n                                              <div class=\"row center\">\n                                                <a href=\"#data-modal\" id=\"download-button\" type=\"button\" class=\"btn btn-primary\">{ ButtonText }</a>\n                                              </div>\n                                              <br/>\n                                            </div>\n                                          </div>\n                                        </div>); \n                  }\n                }\n\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  var Base = <div id=\"index-banner\" className=\"parallax-container\" >\n                  <div className=\"section no-pad-bot\">\n                    <div className=\"container\">\n                      <br></br>\n                      <br></br> \n                      { DynamicContent }\n                    </div>\n                  </div> \n                </div>\n\n  return Base\n}\n\nContentWidgets = (Content) => {\n\n  //#region Static Widgets\n  // const Widgets = <div class=\"section\">\n  //                   <div class=\"row\">\n  //                     <div class=\"col s12 m4\">\n  //                       <div class=\"icon-block center\">\n  //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"search-modal\" onClick={ () => this.reloadContent('Search')}>Search</button>   \n  //                         <h5 class=\"center\">Search and Discover Resources</h5>\n  //                         <p class=\"light center\">Use simple or advanced tools to search for data meeting your criteria.</p>\n  //                       </div>\n  //                     </div>\n\n  //                     <div class=\"col s12 m4\">\n  //                       <div class=\"icon-block center\">\n  //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"theme-modal\" onClick={ () => this.reloadContent('Themes')}>Themes</button>            \n  //                         <h5 class=\"center\">Explore Available Resources by Sector or Theme</h5>\n  //                         <p class=\"light center\">Browse, preview, and access data and narratives in popular collections and in common themes.</p>\n  //                       </div>\n  //                     </div>\n\n  //                     <div class=\"col s12 m4\">\n  //                       <div class=\"icon-block center\">\n  //                         <button type=\"button\" class=\"btn btn-primary\" data-target=\"contr-modal\">Contribute</button>  \n  //                         <h5 class=\"center\">Tell Us About Your Area of Interest</h5>\n  //                         <p class=\"light center\"><a href=\"www.google.com\">Register</a> as a user and contribute data, assessments, and media.</p>\n  //                       </div>\n  //                     </div>\n  //                     </div>\n  //                 </div>\n  //#endregion\n\n  const Widgets = []\n\n    if (this.state[\"content\"] !== null)\n    {\n      for (let x in parsedData.default.ideas)\n      {\n        for (let y in parsedData.default.ideas[x])\n        { \n          if (parsedData.default.ideas[x][y] === \"Content\") \n          {\n            if(parsedData.default.ideas[x].ideas !== \"undefined\") \n            {\n              for (let z in parsedData.default.ideas[x].ideas) \n              {\n                if (parsedData.default.ideas[x].ideas[z].title === \"Widgets\")\n                {\n                  for (let d in parsedData.default.ideas[x].ideas[z].ideas)\n                  {\n                    var Description = \"\", ButtonText = \"\", Header = parsedData.default.ideas[x].ideas[z].ideas[d].title\n\n                    //Here we search for the attr node to see if there's text\n                    for (let j in parsedData.default.ideas[x].ideas[z].ideas[d]) {\n                      if (j === \"attr\") {\n                        for (let k in parsedData.default.ideas[x].ideas[z].ideas[d][j]) {\n                          for (let l in parsedData.default.ideas[x].ideas[z].ideas[d][j][k]) {\n                            if (l === \"text\") {\n                              Description = parsedData.default.ideas[x].ideas[z].ideas[d][j][k].text;\n                            }\n                          }\n                        }\n                      }\n                    }\n\n                    //Here we search the nodes \"Ideas\" child for the button text\n                    for (let c in parsedData.default.ideas[x].ideas[z].ideas[d].ideas) {\n                         ButtonText = parsedData.default.ideas[x].ideas[z].ideas[d].ideas[c].title;\n                    }\n                    const MessengerVar = ButtonText.toString()\n\n                      Widgets.push(<div className=\"col s12 m4\" key={parsedData.default.ideas[x].ideas[z].ideas[d].id}>\n                                    <div className=\"icon-block center\">\n                                      <button type=\"button\" className=\"btn btn-primary\" data-target=\"theme-modal\" onClick={ () => this.reloadContent(MessengerVar, 'widget')}>{ ButtonText }</button>\n                                      <h4 className=\"center\">{ Header }</h4>\n                                      <p className=\"light center\">{ Description }</p>\n                                    </div>\n                                  </div>)\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n  const Base = <div>\n                 <div className=\"container widgets\">\n                   <div className=\"section\">\n                      <div className=\"row\">\n                        {Widgets}\n                      </div>\n                    </div>\n                 </div>\n                 <div className=\"parallax-container valign-wrapper\" >\n                   {/* {Text} */}\n                 </div>\n               </div>\n\n  if (Content.length === 0) {\n    return Base;\n  }\n  else {\n    return null;\n  }\n}\n\nFooterFunc = () => { \n\n  const children = [] \n  var FooterStyle //= { 'padding-left': '1%', 'padding-right': '1%' }\n  var cardTitle\n  var cardSub \n\n  for (let x in parsedData.default.ideas){\n    for (let y in parsedData.default.ideas[x])\n    { \n      if (parsedData.default.ideas[x][y] === \"Footer\") \n      {\n        FooterStyle = this.BuildStyleVar(parsedData.default.ideas[x])\n        if(parsedData.default.ideas[x].ideas !== \"undefined\")\n        {\n          for (let z in parsedData.default.ideas[x].ideas)\n          {\n\n            cardTitle = \"\"\n            cardSub = \"\";\n            var type = false;\n            var linkList = []\n\n            for (let r in parsedData.default.ideas[x].ideas[z]){\n              if (r === \"title\")\n              {\n                cardTitle = parsedData.default.ideas[x].ideas[z][r];\n              }\n              else if (r === \"attr\")\n              {\n                for (let t in parsedData.default.ideas[x].ideas[z][r])\n                {\n                  for (let u in parsedData.default.ideas[x].ideas[z][r][t])\n                  {\n                    if (u === \"text\")\n                    {\n                      cardSub = <p className=\"white-text light\"> { parsedData.default.ideas[x].ideas[z][r][t][u] } </p>\n                    } \n                  }\n                }\n              }\n              else if (r === \"ideas\")\n              {\n                for (let t in parsedData.default.ideas[x].ideas[z][r])\n                {\n                  //Check link type here and determine if its a logo or something\n                  var link = (this.extractLink(parsedData.default.ideas[x].ideas[z][r][t].title));\n                  \n                  if (this.isImage(link)) { //It is an image, or more accurately it is a google drive doc\n                    cardSub = <img src={ link.replace(\"open\", \"uc\") } alt=\"img not loaded\"></img>\n                  } \n                  else { //it is not a google drive link\n                    type = true;\n                    linkList.push(<li key={ parsedData.default.ideas[x].ideas[z][r][t].id }>\n                                    <a className=\"white-text light\" href={ link }>\n                                      { parsedData.default.ideas[x].ideas[z][r][t].title.split(\"http\")[0] }\n                                    </a>\n                                  </li>)\n                  }\n                }\n              }\n            }\n            if (type) {\n              children.push(<div className=\"col l3 s12\" key={ parsedData.default.ideas[x].ideas[z].id + x.toString() }>\n                              <h5 className=\"white-text light\"> { cardTitle } </h5>\n                              <ul>{ linkList }</ul>\n                            </div>)\n            }\n            else {\n            children.push(<div className=\"col l3 s12\" key={ parsedData.default.ideas[x].ideas[z].id + x.toString() }>\n                            <h5 className=\"white-text light\"> { cardTitle } </h5>\n                            { cardSub }\n                          </div>)\n            }\n          }\n        }\n      }\n    }\n  } \n\n  return <footer className=\"page-footer font-small indigo\" style={ FooterStyle }>\n            <div className=\"row\">\n              {children}\n            </div>\n          </footer> \n}\n\n  render() {\n\n    return (\n      <div className=\"App\" className={ this.state[\"HideSearchBar\"] ? 'animateReverse' : 'animate' }> \n        {this.SideNavFunc()}\n        {this.HeaderFunc()}\n        {this.ContentFunc(this.state.content)} \n        {this.ContentWidgets(this.state.widgets)}       \n        {this.FooterFunc()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}